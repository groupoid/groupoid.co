extends ../../layout.pug

block title
    title INFINITY

block content
    +header('../../groupoid.svg', 'Infinity Programming', 'Literature Overview')
    article.main
        .exe
            section
                h1 Abstract
            aside Максим Сохацький
                time 26 APR 2018
                p.
                   TL;DR Build hypothetic Infinity language by layering
                   the semantics and giving by the way the literature overview.
            section

                h2 1. History of Type Systems
                .macro
                    .macro__col
                        h3#om PTS
                        ol
                            li: a(href='#pi') PI
                    .macro__col
                        h3#macro MLTT
                        ol
                            li: a(href='#pi') PI
                            li: a(href='#sigma') SIGMA
                            li: a(href='#id') ID
                            li: a(href='#induction') INDUCTION
                    .macro__col
                        h3#eff CUBICAL
                        ol
                            li: a(href='#pi') PI
                            li: a(href='#sigma') SIGMA
                            li: a(href='#path') PATH
                            li: a(href='#induction') INDUCTION
                            li: a(href='#comp') COMP
                            li: a(href='#glue') GLUE
                p.
                    The history of Type Theory take its root MLTT paper <sup>1</sup>.
                    The the Type Theory was fixed with Id types, W, Nat, List types were added <sup>2</sup>.
                    The type checker of single axiom system with Pi types only was given in CoC paper <sup>3</sup>.
                p.
                    <b>[1]</b>. P.Martin-Löf. An Intuitionistic Theory of Types, 1972.
                    <b>[2]</b>. P.Martin-Löf. Intuitionistic Type Theory, 1984.
                    <b>[3]</b>. T.Coquand. The Calculus of Constructions, 1988.
                    <b>[4]</b>. T.Streicher. The Groupoid Interpretation of Type Theory, 1996.
                    <b>[5]</b>. H.Barendregt. Lambda Calculus With Types, 2010.
                    <b>[6]</b>. S.Awodey et all. Homotopy Type Theory, 2014.
                    <b>[7]</b>. A.Mortberg. Cubical Type Theory, 2017.
                p.
                    Then Voevodsky presented HTS without a computational semantics of univalence
                    axiom. This later was fixed by Mortberg et all in cubicaltt.

                h2 Cubical Syntax
                p.
                    The 10 lines BNF declares syntax that covers:
                    1) MLTT as pi, sigma and path types;
                    2) inductive types case analisys; and
                    3) simple module system.
                    This system is enough to encode
                    core <a href="https://groupois.space/mltt/types">cubical base library</a>.
                code.
                         0 := #empty
                       brs := 0 + cobrs
                       app := exp exp
                        id := [ #nat ]
                       ids := [ id ]
                     codec := def dec
                       dec := 0 + codec
                code.
                       imp := [ import id ]
                      tele := 0 + cotele
                    cotele := ( exp : exp ) tele
                       sum := 0 + id tele + id tele | sum
                        br := ids -> exp
                       mod := module id where imp def
                     cobrs := | br brs
                code.
                       def := data id tele = sum + id tele : exp = exp + id tele : exp where def
                       exp := cotele * exp + cotele -> exp + exp -> exp + app + ( exp ) + id +
                              split cobrs + exp.1 + exp.2 + \ cotele -> exp

                h2 Infinity Language
                p.
                    The idea of Infinity Langauge is a unified layered type checker.
                    We select 5 levels of type checker awareness from pure type
                    systems up to homotopy calculus.
                code.
                    data lang
                       = PTS (_: pts)
                       | SIGMA (_: exists)
                       | ID (_: identity)
                       | INDUCTION (_: ind)
                       | HTS (_: hts)

                h2 Dependent Type Theory
                code.
                    data pts
                       = star             (n: nat)
                       | var    (x: name) (l: nat)
                       | pi     (x: name) (l: nat) (d c: lang)
                       | lambda (x: name) (l: nat) (d c: lang)
                       | app                       (f a: lang)
                br.
                code.
                    data exists
                       = sigma (n: name) (a b: lang)
                       | pair (a b: lang)
                       | fst (p: lang)
                       | snd (p: lang)
                p.
                    The categorical methods for lambda calculus and category theory in general
                    could be found in the following works:
                p.
                    <b>[11]</b>. S.MacLane. Categories for the Working Mathematician.
                    <b>[12]</b>. W.Lawvere. Conceptual Mathematics, 1997.
                    <b>[13]</b>. B.Jacobs. Fibrations with indeterminates, 1994.
                    <b>[14]</b>. P.Curien. Category theory: a programming language-oriented introduction, 2008.

                h2 Contextual Categories
                p.
                    Categories with Families is a categorical semantics
                    of dependent type theory that nowadays formulated
                    as cubical sets or as presheaf model of type theory.
                p.
                    <b>[20]</b>. P.Dybjer. The Interpretation of Intuitionistic Type Theory in Locally Cartesian Closed Categories -- an Intuitionistic Perspective.
                    <b>[21]</b>. P.Clairambault. From Categories with Families to Locally Cartesian Closed Categories.
                    <b>[22]</b>. P.Dybjer. On the Algebraic Foundation of Proof Assistants for Intuitionistic Type Theory.
                    <b>[23]</b>. R.A.G.Seely. Locally cartesian closed categories and type theory.
                    <b>[24]</b>. M.Hofmann. Revisiting the categorical interpretation of dependent type theory.
                    <b>[25]</b>. S.Castellan. Dependent type theory as the initial category with families.
                    <b>[26]</b>. P.Dybjer. Internal Type Theory.
                    <b>[27]</b>. V.Voevodsky. A C-system defined by a universe category.

                h2 Identity Types
                p.
                code.
                    data identity
                       = id (a b: lang)
                       | idpair (a b: lang)
                       | idelim (a b c d e: lang)
                p.
                    <b>[30]</b>. E.Bishop. Foundations of Constructive Analysis, 1967.
                    <b>[31]</b>. B.Nordström. Programming in Martin-Löf’s Type Theory.
                    <b>[32]</b>. B.Jacobs. Structural induction and coinduction in a fibrational setting, 1997.
                    <b>[33]</b>. G.Barthe, V.Capretta. Setoids in type theory, 2003.
                    <b>[34]</b>. M.Sozeau. Internalizing Intensional Type Theory, 2013.
                    <b>[35]</b>. V.Voevodsky. Identity types in the C-systems defined by a universe category, 2015.
                    <b>[36]</b>. L.de Moura. Congruence Closure in Intensional Type Theory, 2016.

                h2 Inductive Types
                p.
                    The further development of induction<sup>5</sup> inside MLTT provers led
                    to the theory of polynomial functors and well-founded trees<sup>4</sup>,
                    known in programming languages as inductive types with data
                    and record core primitives of type checker. In fact recursive inductive
                    types<sup>3</sup> could be encoded in PTS using non-recursive representation
                    Berarducci<sup>1</sup> or Categorical<sup>6</sup> encoding.
                code.
                    data tele (A: U)   = emp | tel (n: name) (b: A) (t: tele A)
                    data branch (A: U) =        br (n: name) (args: list name) (term: A)
                    data label (A: U)  =       lab (n: name) (t: tele A)

                    data ind
                       = data_  (n: name) (t: tele lang) (labels:   list (label lang))
                       | case   (n: name) (t: lang)      (branches: list (branch lang))
                       | ctor   (n: name)                (args:     list lang)
                p.
                    The non-well-founded trees or infinite coinductive trees<sup>6,8</sup>
                    are useful for modeling infinite process running which is part
                    of Milner's Pi-calculus. Coinductive streams are part of any MLTT base library.
                p.
                    <b>[40]</b>. A.Berarducci. Automatic Synthesis of Typed Lambda-Programs, 1985.
                    <b>[41]</b>. F.Pfenning. Inductively defined types in the CoC, 1989.
                    <b>[42]</b>. P.Wadler. Recursive types for free, 1990.
                    <b>[43]</b>. N.Gambino. Wellfounded Trees and Dependent Polynomial Functors, 1995.
                    <b>[44]</b>. P.Dybjer. Inductive Famalies, 1997.
                    <b>[45]</b>. B.Jacobs. (Co)Algebras and (Co)Induction, 1997.
                    <b>[46]</b>. V.Vene. Categorical programming with (co)inductive types.
                    <b>[47]</b>. H.Geuvers. Dependent (Co)Inductive Types are Fibrational Dialgebras, 2015.

                h2 Higher Inductive Types
                p.
                    The fundamental development of equality inside MLTT
                    provers led us to the notion of ∞-groupoid<sup>2</sup> as spaces.
                    In this was Path identity type appeared in the core
                    of type checker along with de Morgan algebra on
                    built-in interval type. Glue, unglue composition
                    and fill operations are also needed in the core
                    for the univalence computability<sup>8</sup>.
                code.
                    data hts
                       = path (a b: lang)
                       | path_lam (n: name) (a b: lang)
                       | path_app (f: name) (a b: lang)
                       | comp_ (a b: lang)
                       | fill_ (a b c: lang)
                       | glue_ (a b c: lang)
                       | glue_elem (a b: lang)
                       | unglue_elem (a b: lang)

                p.
                    <b>[50]</b>. T.Streicher. A groupoid model refutes UIP, 1994.
                    <b>[51]</b>. B.Jacobs. Categorical Logic and Type Theory, 1999.
                    <b>[52]</b>. S.Awodey. Homotopy Type Theory and Univalent Foundations, 2013.
                    <b>[53]</b>. S.Huber. A Cubical Type Theory, 2015.
                    <b>[54]</b>. A.Joyal. What is an elementary higher topos, 2014.
                    <b>[55]</b>. M.Shulman. Univalent Categories and the Rezk Completion, 2014.
                    <b>[56]</b>. A.Mortberg. Cubical Type Theory: a constructive interpretation of the univalence axiom, 2017.

            section
                h2 Universes
                p.
                    The universe system is completely described by the PTS SAR notation,
                    given by Barendregt. Find more info in
                    <a href='../pure/#axioms'>Axioms and Inference Rules</a>
                    of underlying Om intermediate language.
                code.
                    PTS : U
                        = (S: (n: nat)   -> star n)
                          (A: (i: nat)   -> type i (succ i))
                          (R: (i j: nat) -> pi i j (max i j)) * unit

