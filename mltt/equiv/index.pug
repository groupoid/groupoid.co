extends ../../layout.pug

block title
    title EQUIV
    script(src='//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML')
    script.
     window.MathJax = { jax: ["input/TeX", "input/MathML", "input/AsciiMath", "output/CommonHTML", "output/NativeMML"],
                             TeX: { extensions: ["AMSmath.js", "AMSsymbols.js", "autoload-all.js"] },
                             extensions: ["tex2jax.js", "asciimath2jax.js", "mml2jax.js", "MathMenu.js", "MathZoom.js"],
                             "HTML-CSS": { imageFont: null },
                             AuthorInit: function() {
                                 MathJax.Hub.Register.StartupHook("TeX AMSmath Ready", function() {
                                     var TEX = MathJax.InputJax.TeX;
                                     TEX.Definitions.Add({
                                         macros: {
                                           llparenthesis: ['Macro', '\\mathopen{\u2987}'],
                                           rrparenthesis: ['Macro', '\\mathclose{\u2988}'],
                                           llbracket:     ['Macro', '\\mathopen{\u27E6}'],
                                           rrbracket:     ['Macro', '\\mathclose{\u27E7}'],
                                         }
                                     });
                                 });
                             },
                             tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']],
                                        processEscapes: true }
                         };

block content
    +header('../../groupoid.svg', 'Singleton, Fiber and Equivalence', 'Contractability proofs')
    article.main
        .om
            section
                h1 Article
        aside Kostiantyn Rybnikov
            time DATE: 30 DEC 2018
        .om
            section
                p.
                    $$\def\mapright#1{\xrightarrow{{#1}}}
                      \def\mapleft#1{\xleftarrow{{#1}}}
                      \def\mapdown#1{\Big\downarrow\rlap{\raise2pt{\scriptstyle{#1}}}}
                      \def\mapdiagl#1{\vcenter{\searrow}\rlap{\raise2pt{\scriptstyle{#1}}}}
                      \def\mapdiagr#1{\vcenter{\swarrow}\rlap{\raise2pt{\scriptstyle{#1}}}}
                    $$
                p.
                    I am reading a beautiful paper called <href="https://arxiv.org/abs/1803.02294">A self-contained,
                    brief and complete formulation of Voevodsky’s Univalence
                    Axiom</a> by Martín Hötzel Escardó, and it really takes
                    time to understand some of the formulas. In fact, it
                    takes so much time, that I've spent an hour on the
                    airplane from Frankfurt to Kyiv gazing at just the
                    first three of them. Intention of this article is
                    not to create any new knowledge, but to extend
                    available explanations with specific examples
                    that helped me understand these formulas better,
                    when they finally "clicked" this morning.
                .semantics
                    figure.
                        $$isSignlton (X) := \sum_{c:X}\prod_{x:X}Id(c,x),$$
                        $$f^{-1} (y) := \sum_{x:X}Id(f(x),x).$$

                h2#nat $\prod$ and $\sum$ types
                p.
                    Quick reminder on $\Pi$-types and $\Sigma$-types for programmers.
                p.
                    Just a quick reminder that  is read as "dependant function" (or "for all")
                    and  as "dependent tuple" ("there exist"). So, whenever you see:
                .semantics
                    figure.
                        $$someFunc : \prod_{x:X} \llbracket rest\rrbracket,$$
                p.
                    you can mentally replace it with:
                .semantics
                    figure.
                        $$id : X \rightarrow \llbracket rest\rrbracket$$
                p.
                    where $\llbracket rest\rrbracket$ can mention x in its type.
                    And when you see:
                .semantics
                    figure.
                        $$someFunc : \sum_{x:X} \llbracket rest\rrbracket,$$
                p.
                    you think
                .semantics
                    figure.
                        $$someFunc : (X,\llbracket rest\rrbracket).$$
                p.
                    where $\llbracket rest\rrbracket$ can mention x in its type.
                h2 Singleton
                p.
                    So, first question I had was: what is that isSingleton exactly? Is that a type? A function? A theorem?
                .semantics
                    figure.
                        $$isSingleton(X) := \sum_{c:X}\prod_{x:X}Id(c,y)$$
                p.
                    Singleton can be understood easily in terms of its implementation in code. I'll use cubicaltt as the implementation language which is very minimal but powerful Haskell-like language and compiler. I'll make a type which has only one constructor and derive
                    $isSingleton$ for it.
                code.
                    data One = MkOne
                p.
                    Intuitively, $One$ should be put instead of an $X$ in the formula,
                    so if we put it there, it becomes:
                .semantics
                    figure.
                        $$isSingleton(One) := \sum_{c:One}\prod_{x:One}Id(c,y)$$
                p.
                    So, after we apply $isSingleton$ to our type $One$, it becomes
                    just a type for a dependent pair of this element and a function
                    from any element of $One$ to its equality to that element $c$.
                    Or, in code, something like:
                code.
                    isSingletonOne = (c, \x -> &lt;proof that x is equal to c&gt)
                p.
                    Thank you for your time. Please send your feedback in Issues or PRs in
                    <a href="https://github.com/k-bx/k-bx.github.io">here</a>.
