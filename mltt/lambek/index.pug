extends ../../layout.pug

block title
    title LAMBEK
    script(src='//cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML')
    script.
        MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processEscapes: true } });                               

block content
    +header('../../groupoid.svg', 'Lambek Encoding', 'Categorical Semantics of Inductive Encodings')

    article.main
        .om
            section
                h1 Article
        aside Paul Lyutko<br>Maxim Sokhatsky
            time DATE: 1 MAY 2016
        .enc
        section
            h2 Initial Object
            code.
                data list (A: U) = nil
                                 | cons (a: A) (xs: list A)

            h2 Representing Functor F
            code.
                F<sub>A</sub> = 1 + A * X

            h2 Construct corresponding F-Algebra
            code.
                record listAlg (A: Type) : Type :=
                       (X: Type)
                       (nil: Unit -> X)
                       (cons: A -> X -> X)

            h2 Introduce List Morphisms
            code.
                record listMor   (A: Type) (x1,x2: ListAlg A) : Type :=
                       (map:     x1.X -> x2.X)
                       (mapNil:  Path x2.X (map (x1.nil unit)) (x2.nil unit))
                       (mapCons: ∀ (a: A) -> ∀ (x: x1) ->
                                 Path x2.X (map (x1.cons a x)) (x2.cons a (map x)))

            h2  Introduce connected points of List type
            code.
                record listPoint (A: Type) : Type :=
                       (point: ∀ (x: ListAlg A) -> x.X)
                       (map: ∀ (x1,x2: listAlg A) -> (m: ListMor A x1 x2) ->
                             Path x2.X (m.map (point x1)) (point x2))

            figure.
                $$\def\mapright#1{\xrightarrow{{#1}}}
                  \def\mapdown#1{\Big\downarrow\rlap{\raise2pt{\scriptstyle{#1}}}}
                  \def\mapdiagl#1{\vcenter{\searrow}\rlap{\raise2pt{\scriptstyle{#1}}}}
                  \def\mapdiagr#1{\vcenter{\swarrow}\rlap{\raise2pt{\scriptstyle{#1}}}}
                $$

            figure.
                $$U = ListAlg\\$$

                $$U\ I = lim\ U\\$$

                $\begin{array}{c}lim\ U\\\mapdown{\pi_i}\\X_i\end{array}
                \Longrightarrow \begin{array}{c}F\ lim\ U\\\mapdown{F\ \pi_i}\\F\ X_i\end{array}
                \Longrightarrow lim\ \begin{array}{c}F\ lim\ U\\\mapdown{F \pi_i}\\F\ X_i\end{array}$

            p
              b Precise Encoding
            p.
                Our encoding allows you to precise control the type of encoded parameter.
                There is only three cases and three equations: 1) for unit; 2) particular functorial
                type over a parameter type and 3) recursive embedding such as in Cons constructor.
            p.
                <b>q</b> &mdash; is a limit in <b>Dialg P</b> category. The constructor body is calculated
                with <b>q</b> applied to forgetful functor <b>U</b>.</p>
            figure.
                $$
                q_{P,D,G} : End\ P\ (G'(-),G'(-)) \rightarrow P\ (Lim\ G',Lim\ G') \\
                P : Set° \times Set \rightarrow Set \\
                U : Dialg\ P \rightarrow Set \\
                G : D \rightarrow Dialg\ P \\
                G' = UG : D \rightarrow Set \\
                U (Lim\ G) = Lim\ G'
                $$

            p
              b Unit Parameters
            p Like for Bool or Nil constructors encoding.
            figure.
                $$
                P_0(A,B) =  B \\
                q_0\ e : Lim\ G' \\
                q_0\ e = e
                $$

            p
              b Fixed Type Parameters
            p Like for Cons first parameter.
            figure.
                $$
                P_1(A,B) = X \rightarrow P(A,B) \\
                q_1\ e : X \rightarrow P ( Lim\ G',  Lim\ G' ) \\
                q_1\ e\ x\ A = e\ A\ x
                $$

            p
              b Recursive Parameters
            p.
                Like for Cons second parameter. This case is a key in encoding recursive
                data types such as <b>Lists</b> and recursive record types such as <b>Streams</b>.
            figure.
                $$
                P_2(A,B) = A \rightarrow P(A,B) \\
                q_2\ e : Lim\ G' \rightarrow P ( Lim\ G',  Lim\ G' ) \\
                q_2\ e\ I\ A = e\ A\ (I\ A)
                $$

            p
              b Identity Functor Encoding
            p As known as predicative encoding
            figure.
                $$
                \begin{array}{ccccccc}
                    A &           & \mapright{f} &           & B & \mapright{f} & Set \\[3pt]
                        & \mapdiagl{a}  & \varphi      & \mapdiagr{b}  &   & \searrow     & \mapdown{\mathbf{1}} \\
                        &           & Set          &           &   &              & Set
                \end{array}
                $$
            figure.
                $\varphi : a \rightarrow b$

            p
              b Identity Functor Limit Encoding
            p As known as impredicative encoding
            figure.
                $$
                \begin{array}{ccccccc}
                    A &           & \mapright{f} &           & B & \mapright{f} & Set \\[3pt]
                        & \mapdiagl{a}  & \varphi      & \mapdiagr{b}  &   & \searrow     & \mapdown{\mathbf{1}} \\
                        &           & Set          &           &   &              & Set
                \end{array}
                $$
            figure.
                $lim\ \varphi : lim\ a \rightarrow lim\ b$

            figure.
                $$
                \begin{array}{ccc}
                    p^{-1}(U_b) & \mapright{f} & U_b \times F \\
                    \mapdown{\mathbf{p}} & \mapdiagl{pr_1} & \\
                    U_b & & \\
                \end{array}
                $$
