%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.6 (Build 17G65) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 509 118
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 509 118
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: ENXGOX+Geometria-Light
%!FontType1-1.0: ENXGOX+Geometria-Light 001.001%%CreationDate: 10/10/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (Geometria Light) readonly def/FamilyName (Geometria Light) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /ENXGOX+Geometria-Light def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /M putdup 34 /o putdup 35 /d putdup 36 /e putdup 37 /l putdup 38 /s putdup 39 /space putdup 40 /a putdup 41 /n putdup 42 /A putdup 43 /p putdup 44 /E putdup 45 /r putdup 46 /g putdup 47 /C putdup 48 /P putdup 49 /S putdup 50 /T putdup 51 /H putdup 52 /R putdup 53 /u putdup 54 /t putdup 55 /i putdup 56 /m putdup 57 /L putdup 58 /b putdup 59 /v putdup 60 /one putdup 61 /two putdup 62 /three putdup 63 /four putdup 64 /six putdup 65 /five putreadonly def/FontBBox {-412 -220 1438 923} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1D53D6B91070844A9B74E43083EFDBF34C5770D328A6B574F14FE01D76EF86C53820A66FC19E082B068B33DABAD55F1C291FAFFA23ECB9F8EC0605C0A9E3B85544AA0CCDCC141DB39B406D85EB4F2360D566193F2E4304400A6D429C392CC8F67A0EA0F770FC6BBFBA1FE0DC4B2CCF7B9E36939F6213CBD9A315109B45B3091B384BEA5A47014A2251E509D4D739D949CD8FF6A2D0AAA50CBB2DF70AB1AF2D690BEE8CD1EA67A213BBCB1A9C57AED5B7D838409580D19207BAD2DC663A48E88F7C6E17A0025278F0405846D8AD3917CD695ABD9ECDCFE9388A58E529E9A93F37FBF1227FC2072DA48F2A5F31C39995BADB5A87D269011036574C925530BBE3226885E9D99B3F93478CB75E9321538D721117E0A089412DA8B005FC3AF2202B2A2FD54FF131CBCB943AF1C970F3DC145CD6BFFD9AFDE174D7BD5E7D0E479B0E77B2100C2D5E422B61B283B2A57CA9BF34C2F625C90F35222BA07D238F445A9B58A5854C27A8EDA066F35F20C41022D8F93424D89E8E9901EE6DFEC6CE807EF022E3CB6D16D563BE808DE64EE6407B9D5E5D5FE57D5585AC7F0B830D9F8D6122A2B107C4FBF10ACCEA3806597ABD5FB9B0FF9A2866E6B89283E06449107023782FD7CEC7D7F35B42A0D09B3A8ED2642F006A2C7C9F3101FF7382FA894C4BA1DF6843E0D1B56C6A97A070BE5BE672D65F852A979C0D40DF44F5C1E6A26D5AD434B03AC82FA3616C69D117B1E2275967675DA21D50D273ED980F682273177C404164F941D034EF23B86E62781A610947BB447654EC51FCD2E773ECB9500D63419B82261525DC078648856F7B90929BA453776ECCB2FAF28873AC0918F376A43C9ACEE3275325302C24E28A0D3AD4D86ED5554972695179D55EE1CDCA15400ADE9E7597EAA6AA248FEA0205DA8FA0B80DDB3434FCE1E45C87B10C4039759BF648571B3EAC88F401A62397B71F305F33DCD83B92ED4473F8EADBA526FD009E527F19970BBCC4E877E5419C4455E69C47FA1BE75FC09D8A5047F94B01CC6124D7C9D8B8DC7FE0994D75547CA26014E5DC02A62A721DD845E076E33DBB2181F43631B49D8F52CE2B2B7D58F418E1FA3C2C80FBAFAE2ADB52FAFFDA55283EF33161E8BB3ACBBA792EF4C3E122D4EBBD9DE6E03334C27742E48C0EB23AC6BE63886FABE5F61C2B1516A7BC72E2B3881A69E029E672001F9836F6D16F2A49E887BD21302FFB58F88874A3AB27DC26EC1123DBF9E8464FA5AC612A5865E25405DAE116DFA0886923787BC96B6F19C973B4B6B67CF8382FF52CD579248C06215F22045F015EE66D2FA73DB4841247F023C06D64B8C2A41D634668E5B741FF1073454EF992AB85E28B409971B39B8B3F0AD0A240CC890739DADAACC2F4D3153C183EFD4D1CE515508CAC76EAC281BF61C46D54FE452D43F700EF89E7E3F61069C36341ABA36EAB667C27EFF4CBE60EA3D00A0899FC68F9187ADC720D8AD15C4C2DEE5654E0D246D34515B408A5B580E54B11C6B2B3B6F0F283549C79F5885D6C79986B756E2D5233967C1CD79DF1B497261E4EB90473D74A63303628F4530033AC16AE9ED1731F7F6C24973B1DC5B7F74529AC8D96D665AF24E0301DCF5B8BB3282239C026BDAA56EA0C790564C3A31CE860B46F643D5D7801667DF3720301A4657947B917A9B695DAE33011CD9DB550917B741B931C3E6CE8CCA93F365A0C2F2A4948AEE2B51336A87CDBD7CE7DAB04C443AB3CA48D93A5AED3065158F26FD4D19274FB30243375A36D7342098BAFA285C3F453C415A58446DC087BF763A392B1CAF8677A29E2BB9C793F5692DB647318BA2411F83166A368F6ECCE1DAECE46F4D2321F52C86EBEB2A7EFF72F73A3BDC8CCDE7E61625D98EFB2143837F5F57A061660BB0267083D89051AF8A460A5FC8AC3893712B7D4C0B98808608B318CA523EAA4D60EB93A2A66D2446A17ECAC95CA0419D9896155A26BC02E08256762A052E6DDC48C0D2B9674FB15A8412F7BB5C5351EEFDFF617638AB8F256C12E71C6FFD33034726F0A9ACEF05F055A5EA3DEAB7A271113BA695B53593096C32A6990696898BBB11AD2794D6A8CE270B84CCF26F80D48A9A9CCA90398A939F500D2D45D1F69C9B4A173503547E7AEBD8D1677F77BEDA5033230B44BBD1622C1E42B6BC4E8CF81862456A7757BC62CACDF01B488E134274269D0851D759710304B43604BF5D625DF67FE06F72AD125E23BCE8FD66DB4AC67B59046A616FE407931154C9919530405E119BE8E3D2B065226EE94B09D7D38B5C05E7FAB97105A236B7EBEABDC1C6E3422F15D71D87F253C6CD4A917924A6EB7BAA9F68C330141E50113FA304C60824FB59623A7D7F0CAD08772B1C50B64288F1D5BE930842321D15CAF8D63AC3C6DEFE93509A4E92D54D7023493660263A36BCB1AAC905BD57480E80350D78DDD87E89B60191CD36E6B7A96CF1BC9C27E7D35AC32532C3C55DEAB0BFD5DE3D3C4CBD27694DD8E2E2A66ABC9FD75A71F3D0754DCFCB636DAB8CEADB01E504633360A4C17C986615EAFFB8FB141F31AE828829CF3F41895B06C3A5A896812BB8DC599CD90846988A9101CE334CE76AAADED44D97D9D78D5681AC294B45E7F43FBACA6A4CE1A5C68EC3E1D1B5A1F20E8E5A77847C6C18DC023D011E7FA60A734CB37A5330B11648B36FBF49DE737A5A50346C155E58B8D7AA26F4327B8D9FD5F71F8684A220B673F6A07531766D5A4FF176558007B4D280F7A5DFD33571053F8A527B58C79FCF1D55D720B6CD599C072095AF124551410E8CBDFD5DC70ED20C2390BB322B9FB0A1785A9582339FF030E210A331E0EA3E8083EB5796A81A0F399AA489ADFE4A2C0AB9684BC10E32C10A118F9C6EB102DD70997D41FF12D7D038B2E2BBBAA8D13AC0CA8E6A4B9DDDD0F720D620EADE33FECF3E33071D47C5AC7413A059F6B60C56B51C33773E130E0D4E2B1CFBC53AA72A61EEF3E9DC5A9E6F824E15E573949C6ECB58727942666EA817606E5BA57C4A611937F0761373A6D14D38B2117FA1540F03E748E8F3B92F3D7890AE1C1AF39744C29EE17F74D5B11A88123789EC0DF28D3ADDD5DB98BA12D6378E3E0D21156DB04757D113B7DBFD80055F7F4DF3D30F2FDB72E9CB04C3E47A683C5A4A410CEEB7F46E4F84D50DE717FA7C4E88125E26F9C4FF767E5EF88601497A45DC842B3A275E1B48EB1F076C02887FBFB7ADB96C5388B7CE2A3AF123D2B1491F96ECF22D7F8321BE1DC5952F790E0FBFD26DADD637965DD7993C09CDBAED400695EE476102872FAD3148C339CC3B1A986556D7DF58A04C90EBF86FE22DD93E163C80C44A3ECA2793CCCB53AF67BAB798B960618AB5BD015ED237B8C1758635F32B4F8CA4164D06E64065023F7F6D8DBB82D1E6E788B0C1C1F15289AB45F4BCC7A7FDF89650A648C511C9F9C5A7FEAEEC8AAC29D680CFA56E8F7D137466CD755744BA286820673CF28E53AA0D10BEFAB60D27AFB27C7EF2D42F57E61BF6DB6B1E90A8B71D1FB0DFC2F3FC663C3397F0149652A092466A22F7F5D6D81358C9F686090C2B1461A531D9644BD0163D1C02E8236659C0400B87797E571B00BF2AADD0EB0820EBE325AB3BE5A8D01D56F1B9ED875E9A1E99E724F409FDBF2A0F808FA8357494B1DEC414D66F7C1648A10CEF75F5585B28CC7421BB32DAEA7794B3148E32B20349714A4C7A1CE880210740883F789CE58AE42657B924890379D5471A9F94B303E6E890DBFB3A714240DB8C0D5029E58C6F9F474924A0698D48CDEF800965533833FDBE8EB59F6C44B848547BC28E1AF56E052E2B0E7F37B089ABEBE84AC580F91F0FD09439B5776CD2CAB63D33AA1466B42B785D88BC2AC8F954B6D1F292F1C6F689721F803334169756BD09A02A92DF5230D1689D5EF33031F93633BBFA8EB89025570B9C226299BF1CDBAF8EF68710CF6E7802C1AEC889CFA1E93771A27ADCBA3C9B7EFE6CEBBCB035AD6DC845C456ABE6C727DA41E4B74056466DD26EEEA6BC47DE66ACCDF1FFA65090F3830AF44234439F84348F55AC87BBC97CAF17E7D27B49044C048B811B1087D14C600B440D9166D322BC32E701683FF234BEC210699D65251BA6E9D593D24C6A1F4C938067DD19BC5AFBF361531172B649327B2F4CA41C6C2DD6AB56D6704AF787B3AB0B046F6CA69FC1FB262D0568DC5E00408F7CA039FF31267774846C3B8C31F42E549F4C951CA9768E4C65EA6B741E5F649525E53F72747B529BE47FD0431B5179A455A4BF8291E69A566F5C652215C23C52018EF6E5E6BA2E23889195CCB5789F1CCDEF0CC971A3093749ED776731EA5FC978FFEDADE007241B5D8E54BA43469CD11EE0C33B687F18B8696B260E8976E8BA45A565B01A0D93FE3E1A70AAF6EC578B5838D844C10B444632FD597DF84A09039E7420FEE21679550C9A66DB10C8543751799861C62D946302EADCC1933D3114B0D9D6178DBB9E478D864AA3867111470053D536D7735FE529D2E2C498CF5F19205B491EDE0448D9CF6FFAEBC19DD70DBE48F2D6715907358A83A25C552831CC98EED755E5B418BA03E6A1E6595BFE5EC276C008F267D0C58D1BEEF4FD42555F90F8C559B8B060BD927E0F0B8E9676D05542D0E55DC27DFABD22ED98098E352F95DC56A7F019F95C20FDC8D1968488BA4C1E482B6951D31F3B531E4E9965D004AEA7F3CE67E94FD12D4F07EF6E347DC06EBE24229E609200EA0F0A44DA02F1ADCE7F5A9F73515DBCB6A54B25CD3A1989E05FB8ED10C645AC820B0F87DABF38BF09AC2443FC62336ED161FF55B983D5A8555D643E420C565F748C543EB112D7F62325900F1DF44922C9B8F209930D6E44393BB06A995E571EE20D13FE7ECBF42DBB1A9AF6C68E4219B8150AC9C3EDB502C7C1C8942778CD1C57FB41FF099C0EF63D89AD68C7A1AFB26B8B51C14A06137DD7BD87574DEFC425594A22D444AF034A95D25A98CA88B3E2166A62D9B6D05225A5182C066997BEBB9644C8C3C0DDBD9EDE5074896B2FD8A4BCD7102D7C895C2F3063953BD2F34431DA0649C62EAF5F9010B4789B59B5B2447A2B57A36F28C96D0FD951968541A4584A89BD235ADB26332DB72F5EA502D25B0B45EE919A37F73811EA1CFBA5E8D1406DFCB233C0AA4AF91929DB9AE8DF83A154AC7721782867CD0102C4C4045E56A68BBFDE2B396F0749EF974A88D7D961B62B9B0E2CE301DDDB95C0342BC5FDF87538D53247E4216D5BA50C4AB8749240891CFEEBA27933C9552F4803D10F3F8836E405657D25DDDAAF69C13BB8795039625753FB0847E59358718410AD603A36FC2FEA5610C26BF84B23646F60AB787D3A36A9B2C36549B9BE9BA3C9E0005635F565A4AC97E4252C61DDAD790327E0CC368F867531813B2117394096222C23136C690C460B09F384CDA54E438B992A1FBA5B38016D6DC01FC86A162FDCC59C596C658FD743CCF72B4A998ED2E89433B9455D09F2D466E259EF2E51ECF8425C980500DA912D06C0088A3F66266327466990990C451E70017FE8126DF2BB8945D55F11AFA922EB36AACE926BD8F5F095EEF3DB1AD12E1F8B70507FEC8723CDDC20BA36459DD98EF3AC8E75ABF29C83326BB04B3602C0038AC25AF55A8E05F5966EB72C00B939B30D44EEDF1DDA94BBF401BEBB8A49D4C2EE99019942125EDFB2A94CEB247E2A41704FBD304A01B63D50E883D469D5D59C84F60C906263B3F2A6CC52899DB544659A5646ADF32724B93E5B45D706B45CCCAEA0E38E91D023B342263F12C3B694BEBFFFB031D6D6BB6535278E2D21E9B60CB399C85844C47BAF4EDF16B4EB8E084AAFED59E9DBB3052DC7B4970DA07AAB6822ED9880FE68A4D3725E95A496E197A56B9E25FE109B7F4E940EA1AD28A539823CBA9DC2E6677B64A9262FAE474B951FB250A6D02E638F39427F93DD21D3DD6736908041994632F92ECFCC9BEDABF7979E77105A6726EABA5ED79FD4C29F86A5C930EED3AEA4DA779D17B5592F36271D5180778FA8E5B3C44A173FEACE2D2C17435A56025A9E001AABD08B73EE6AF76DA088301570348C0EB1EE3528BC05623D665DCF59B17C55F9C95CE7E37D2357610E2AF8AEC0AE804FD1AAAA586839FD41D4914BB34D2805DEFB1B1741E2337F722C9A57A81BB016BF303076E1BDC56F82A3EE50D433E435924F81E8DBD5BCAD5BE5A42D9B1259B949F24C91AF6209CC0799C965468F2E69362F29262C97755312E4D099E2F4140A1F650E4BB1439275B6E5331F00633CC8E1BF00FBD6DDCFA40262BC73E44D014B87300BB41802E50D3EB98CC9C0520FCC1B36F6F353CC50705003EBE5C5C6B0ABBA6DCBAF3B9585FC40989B9E69A9CE97B117EF3DF597F4DC43BC5A812518E08C7FC6C68BDF0A95A4F237EA93CE882681CF7C8314200BD52A4BB197A4A6D39388D3B0D51350BAD627260F520B2C2C2500CD75B8953EE34921242BC6033E4CE74463DDA87484FFC8FE36523B2BD07FE95D36E7313CC62260C1040AFFADCFA35151B35C18495B2873574E6B3494D4C56622715DD6C939356518E5C65E330523E9DB3A08CB35BB7A791C061367B5FA5B6CBAE764AE46F2AD5A1E9B44501D0650C0A20CF69A8F6A1DD73B3021E4560133CE02C075AF3DB84B5CCBAA8A2BAAE3E4624C759C883243A4E5FF6904AC0FA5A7D8109ED0C9A4272F3F0FACB6718D5FB2C599CE4F599DBE81DBE3D540A4A99A3FF184133C876FE68077663F23E810B953DA16F154F71FB420D2E4327F8D1D869EFD9338CEE76FCE535F3D9A8582731979F4CA7058E489B4CABBE2F39A374415B62C1F5F8E31E006D6ABC736057910A3729AC60360CEE1B2C8D9F773363ED24C0C6998832D2AA521B5271CDB860D4729F7061A1D2AF9901E59AABD01F27D909693AA4AAFA7C32509E95153571E50E5D2B6A05A6E4E139D5B5A12562E6BE814317D05251A9C0E892142F201432A7D07FB389A85017F4BF99E1C416B3BE9FA157D9703D7DE43A5B3D3A3190C3E827417CAA761070C63E7790F8054CBC2A8CB5ECFAB8CBD74A2208974A2425BA2411922DF658CB27533813108DB1DED21A8419480CAC94DA3320A0E826F84268987D6EB437620D356887766733551E13F764F626792D19EFBB9C1A5DE550C906552E7FB9D5AE6CE5E4214B294124F6A1E9688EC72B3A09EB135A6AD579CB0407C5EEBACEF81CDF1F69BAFD3A941CF98563B94FD47B3B1F3FE4A6D118BEF294537E6EB19662FDC8E94D081C2F2A56D68878D180134EA44FCCA5EB7341460B6EFC27E5D12ACB5973643B1693322A5B170DE76962533EF1700DC171A478F1938803B8735A1DE230078C1A8DC319877083AAEC7C0C7CB70951ECEF42A4A67EFFB6A65C4585338A3F0DF11234EFD29617D1FD5C913B1B383D3C4C1C94CCB3568BCF705B97D9C535E217B04A43121737F373B4EFDF08768D68F34D1DB92CC01F32B0450AED0EAA60F72C198F51D1BD6DCD7D5BF3205A3817121F3D3B99CB5B82A904F55EB2E83AD5914BC0ECC61613DE2702BB541C92D8CCFAF99D5C52E3CCA2F11840594A83F3C4BCE01A99D5F09CD446CD6591849A1ED676EFA66373C7F0F7204F537189D9BF639723047C552B31067387535FBF511E344A272393B4C5D066D8C35DC8E43680F2D37B1155DEDE033E446F1A44621E8830D2F362301804DB8FC7F06D0325A43BB68902037C7B2D2170CBAD191B95DE101DD9151FD106684F84BB44A8A259C41E39C6C544FD2CC0725BE1F6E65A3AC872F9A5155A6E427646AB2013AFA59AC793E356178FF7C9F1ED545CF56F4A016E1FD576F2B17F03819138BFA8DB09A7043DA1D8F612DD74224766183ABBE7DAEF9717081010D335C97A58FEAC121EA7678871CC51BE0EA84A55599770732EBB5A4C75472552E4933F29DAD06E09E5C9B20DE36DCC0F40361EC44FBC02E44B7B3158AD00039AA54A2C113C8D2D5BC6FD512165E6A7718B33550D3CEB6B5C0E9A7B5EDA261865707C2A385AA68EC7A69A8821E04DBF2DBF167A6703E140C1FDA7D24A3FDC8216852704E811B5286EAC099471F082E5BEE9F8508AEE4E965FBCE85CBF12F0B89C371C3EFAFEE0F00BBE7AF58B9BC7BE7BE2592C3A27B9A9D90075E52385EA3E898611B296AF9258E63BC92AFD082B6F06745652CEE775E9EF54725D853F02FE425997D3FD8A3218064B1CB687750C400C7BE7C4D19FA3C298ACAE1A80839452FAF7A64ECC4B84E0BE339654834B5D7C606F4F4D0C9388B8B47358AD45FCE20E472837716C4A21ABA8A7BDD5961C31092E9C4D0706FF0D365C346AC4D55CE43C8C966CD241F280E107BBBA67C8B9D6F7AA5D04EC82F1CFC6F921837DD9DDCD4E95B5D0AF61BEA23BDA9442EC6AAC5BE3A9CD1940156623F71034A7000597EFE61648E12A396B8D9BAACFE53AC8C24FA8F2709BE1E2A51FC95CC6D5EB2F4F12EB1172D5DDD9809F6BE52AECC0A2BFCED8EC2975B6114CAF2F67FB63B3A3C4F2B9E7A6CE865CA0103E78238FD5E984288D3AB8108FF867BE2F4C6150A19468C7119343EFE11B3B2B9941FC6E4F4E24F9063D4649C92A0CAD9F96B0B8485DB672AEE78C8F987D70523420716BB8E7BC99CC6B2899AAE71C036F159BA1F9102D5A134127839F1176643AE3B73C845F66D43ECCD1884E4630A8FB55169C975C94FBB7AB453FAA910041EFD23DCDC8A9CE3D4EA8883A22E9BF91BBC041D5EFC7C9F96B2D6DA44FCF183E19391B27F70E538D2861F781AF45D555209106E7003165C46D2F8A03723941962F7EDD06306E0720B1D1452F8694248927E61C0B8F5D81D6E4C619DB87316201EB983072B2937134C2EFAEB0D14D167AD75D4DA795E25E44CA682AAE0CE600E3EC3C38249F0F7BC312D4E871CB6E18D7917C2ECFC60D58EB5306EADC6FC2129FF385AFCAAB7EEF876B6DB03224662DF997A2F5AA2116FAA0DE08D1A2BC8F8C75A200A633A806FD90146F9E637CDF065D235BF81E9C1A8308F8EFEFD6E3E2076E6B7962B34B996FFDB5D6B9964E95F86AFD1CD56ED127CC0D4B1C91297BA9D3256A5AEB0636B6435C6EBFE0B9040F6B829D10E044D6CA7717F85108ED644085A4238BC0F69CC28843B9BA8A1038D30AA5544D373FCFFD77E31134D7E2E1C584277E881E892125F4F36483E6CF744258DB98CFEFADF05E883FECC7C027F5D254B9D72AA65904DE8C2AB19D9CFA9CABBEFCFD640BC3C3C4ABEAB4BDECAFDF001D0A35CD8551BE31BC6382E7D2547C9B478E9F8BBF2784488174C5863A7A948BC9388C2B2F7247158024255D22EB94130B946AC352C5B9DB2A74BE24F7019D39EA1913AD95371D90C6243FCEB0AEB21E4BE649C156D20FCEA421B3CFBF677FDAC22FF5F87857E18B15A58D58CE5FFFBF9E3DDCD14B341F14A9EA4582C54AEFC9B1FC8ABC88F3050B74B85AACD802BD1F2E49DAFBE61A4C9864B32538F8B3E680C2BDAF3BCCFF9D5A8FA9CCA4600417D6359FED9EDBBD12041C4A87F5C1F45E53E64C2255A561C64DB9B9B1FEB9FBE7E169145FED8794388C7BA18391A2E3952F431A2888B259BCCD822DC01D2B14E2D46F30150468E5F1D1E2BB48798E6ADB193AB118520A608A9073B9E3C85373CA3AFEB9EA515B79F077CBEE407F88EB6FED5B236A483C5EA5FBFF4C49B6EF33B6B93C58A259860E294D1E6E73B731138290314F10CC1258A836FCB922EA64AAA9E8349A7D2F75A3E322509DC34B93CF840DFAF3FDBCB6D56B639BD14F3CB873BFD8923DA69E82E1AA674D2EFD83CB031FC01DBCE19F12B3F1CE8A710A275E657E8D40B40C0D620EDCEA019DDB526DEC24555E913270FD43A10862965962789C62D38DDAF711F8BFEE81093A173ED5B04DB1C623D8525452C8043E4747CE188BBF931265C649957804093AD247E8C07B73A0FE2760AE4B3E51531FB26418818630157DF34398A3CE003738D4FC36117B53A33F96F7E7234A6A3CBE5E13E08462F0BFC921913F54CA57EF6F36333D119079188189B97CA090D607A43056A19738C562CEF4CE8E802C293C7958B3F19A67D5198503B89DDF78A2DD5DC73E3C3BC32FBF7AF81630306D67E8A0A79C8427FCC0CD96569574DD869AA65A565FC9D68ED6520609FF8CD6BF33FEAA845878DC14BF76B4815B59A216EEF79D19EBC2CD9BB172EE789B9212D3658DC3884C5A81130A396DBD578B5E0F86F53F0069C62D34CD60207DD1A9B15C7B97B5CC7E31E20B02A139701BBF9DDFC365D786AF53E5B905EFF3D4731EC4E41AAC92551B57F617D1351B39EEAEB38F03F19CC44D9492A114B7523954413F0CA1042D96262D8176648ACC95FF57D76A0331A02922EC105A97DB5D3780ECD1635CC6399C77B5190CAE8DAEA75BF4D7244363E51E42C5CA38ED20EA5850F0BA83C455D896B80453661FC8647E61B2D70511AED9B2C76DA07F905FCE8D8BE0A62960E9CD48229CC631D0D48D2D12A19CB8042C815FCF09400EA0FFF1F04E650F03D309F3026A2839F2D10F8522F360936834BA5E5796700DD29ABDE5AC417076B0133D27C5AEC9EE3DF8613778DA32811D4DA9DDCA9C82C23E91D07456B63447205337A99B1FCB5A442881FDE4114C9076C2A0BED2E579F5157871E38D526E82E86AF5F0243D16E0D780DA8252C17E7D726D9C0A98FB7BAD2968680E5C11172BE0ED6A40D1ECFF0A73F6EF73DCE6BCE41086548A0C997828031AAB7602D631A95F5EF84C992FF1D72AB3A1DC69FCCD92F7649B80665F9B430DE9BE6655FE14DC813DE2D534220791D4AC2597BD3D72FE519695B51E6BF6F6273B5C53E5EE51E755DF3038088830514FACC14D061765A8C0D6F90A44370796DEE5C3AE1BDD387B45D5EA409EC98864862A624D51147593FA8CE069359AAF9EF087F808F0EBDA4709696820B712E39E18544AAFCAFDDE50FDA09A66FD3D20A506B5ED932096F59757D6D8FFE393BBB49FBFE1EC485B5E82D4926A4981FC6A6748512A75F6CA91C62EE4A5658CA1E73EE2416026FECF3CC050CE3D4EE4B2A5A95E94FB01B5D7813366C2BA3F7F634385957F51E12049D2C96CB63976322E62682E7855B782686945AB643BABF2B3C12AE5F5A8352E417810A48AA2D2FF81BED233DB5687415F32D55BCD47D3665C11B785A2EFBE6BCE434D5784866FC607D8C6A48D33BFB6BDD1398D6E64BB5217993D879C28FA9BEB57FAF87652A93DBEF84EB3C494B42387301AF9876A6AEB5EA4770E31A3A061B7C865F1A040F4E38662E205C81912671C39DFDEAA92EF2EE4E7B73DDA961F902F15097356C8F350B8CADAE12CF9900C6E37E8DD01024A31711939CEC5C6047830DC71F9FCC635767284748A3950C19CEB3669DF55A8CB8917B68549CD5CB3AD639ADE1F703830E378616A041039F0E1709BCB376DB10F8D66ED0A87417558C080DFDF62B6653D7EDDE8A758AFB28F9980E27B683F3DDA9E42110633E2254FFCBCCA0CEAA4CB9A122A1FA58E0DFB0434DDCAA29A22F26653C6F64336EFDEA3AC924DA450423B31274FD03130477D7BA4B420AC050F6C25C41033D957FEDD78174B24A70E1C0E49642378FD9443635953D72CB0C4E994F0730FA9D98AC044DB9B58495128EECF620DAAC858C55690EFA4554953A81781D33DB5E028A9A949705AFEFE6CF90EA2839B7D5B65ECC13AE24131BF2A357F38B99D434E976ADAE3DE5D771C6EE1BD0FD7C072BADECC0B81E5693EDAC69AA3B6C441ACA8262DDA758BB196F8EF6CA321DBA6412EB9764C96FB74AF179BBBA0C4D93CD22EF258451BA95C601FC488F2C81DDBB1ED05122613A839F93067CDEA259DF6C6BD33336C38560CAB71AB057F7D5C0ACF952DE151A1C2E06E1D233E884D7FD5A78AE3C6FF61BD23A9F6A1B34967D563CC7A9CB558CD5B1FD369F2BFA9ABB797F7428A8F246E53713ACEC11C4D39D5FD9EEC32A36EA1AB611478089432ECEE8D07CB249A85B639B1680FC7129F5FC37E9669724E33FE37BECAA1765B82C3FDDB7138B0C161147475546A79D1B9572BD1FC9AFD01487DA556A38E1327D4D9180BAD845A7DB863770EF2B9028AB210F1966F205DED4EAC1599B667853E4966FF48FBFB522D7A70A7F738C973FB461FDFDEE1457DC6C59F3B7661561917FA74DABD4C9904C672E6EA73115DBEDB26D31BA79F17DA9CA3EB4FA540653B9001C35C48B95BD2F4B68DF5A755BA4F3163A17B9A83FBB45400727F235740E4FD151F600F3824C9F57E1A506A5F2FA483C562C986F1848C78E5C7433AA54728A78F36AC7747F078303D4FBDA908F38B3A39A337C6F4B3E725DFC0B1AF5DCBCA67E905054ACD374AE7F9FEC9F5B0F42E36EA03AE05245DDF091AE21A0855A994FCE152E14E823F9EDA5E99BEA8CFD165275DC9FB329C4D7A1E4F81AE413BB4C9203D98561366054116C03D03F26032B6E65536EA7ABAAF5D808E980E8D78C338EFE9E3FC980C0E43B34FE3DF999CAC9DDB91EA0233C38C83F602068C3180B08B6540261A0349AC9FCE3938C3C52B931A6AADECB0B20180D686B2FD14E2E8EA98E6A9DDCD80B37EBC84061DDA406DBE5F903F549B0283DE5DA43A019A8AC3151BD3C44AB8A3BDC1E8E91D966A7B61009B62A30BDAF3D51FECA192FF0C9C3F5D98ECD3DCC136B8439437AFA685A2C31F8D01F3029EA900AEAAC166BB155A4FB56F14440376EA328306F6F2F65D6573850245EBE47DFA430A0B0BFB09067AE67A07C258A3E83F1AB4A8D86D0867C07DEBBE9882636177EAB14EB638189AAA7D032B02DA91079B810648DFFEF98ABA6E37A949B215FFAEF2E2F7AD77F1645EFCF7B25415449BF0F72A53D202B3DE30EB0A3CC485ABD0FC435225E9864509B13CA6E7AB8817D1A3199E3B10306776E88E0C4EEE2AB31E61F71EFBD07A354E9EFB8022FE04AF9FA6EF888692E49DF11AAF4D3CB452E81497B8C8D94E99EDE98DE734E1CD8FEF5A8E50CD10FE8734108BA55208331CFF5A8E9B442AD3B32D1952CB529CAA06477DDFEBF10046998CDBB99D53099627785D700459C1CBF2FE4F7D24F19CF3B82BDDC3C540F61B99362E2C2CE362F1F8BA323191BCB7126B7846BC81205F64B6ED8EB7B217AB040FB61ADB001A6BE3190744B0CFF6397FE75D036D4A7CAB27F3CC480D4CEA11F9AD2CB41E21B7CB0FAD7A02CF8A8992EE25CBFD0359B07AE96968F82762299175CE59D8BD37AF944D326EDDB00A5712C6DA6C7E79515A46201DE039C794382BEC7F86BB55C9D257F53816864245011FDC4EA51DAF149ACAC672EAB9CD97E12E1AD3B9D5AE75573745CE7F46F0A419FCA913D8D1A1FBDD29FC1B1F6E3E49990049B4A6633AA836702CF4313791528E027351D6494B6A038B3C1B8E0FA0EC143F9DABA3EF84D31FCE35455D0ECFFFEB470724F9149DFA9AF71A85E7DDDD425764D87316A0B538FFED85ABD9FDD56A27371A3E6F12EEAA509CF7EA54CB1240BD1EF10EC8BB948167170DE00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/ENXGOX+Geometria-Light cguidfix
/F1.1/ENXGOX+Geometria-Light renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 0 0 sc
0.60000002 i
q
0 0 509 118 rc
0.5 0 0 -0.5 19 114.5 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(!"#$%&'\(\)#'*++&)[ 30.492000 22.212000 22.752000 20.448000 10.116000 18.036000 9.612000 21.240000 21.780000 22.752000 9.612000 26.784000 22.716000 22.716000 0.000000 ] xS
Q
2 w
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
q
6.5 118 m
186 118 l
186 87.5 l
6.5 87.5 l
6.5 118 l
h
W*
0 0 509 118 rc
0.5 0 0 -0.5 6.5 118 cm
0 0 m
359 0 l
359 61 l
0 61 l
0 0 l
h
S
Q
/Cs1 SC
0 0 0 sc
q
0 0 509 118 rc
0.5 0 0 -0.5 441 71 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(,-%\(\).)[ 22.932000 12.528000 10.116000 21.240000 21.780000 0.000000 ] xS
Q
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
q
433 75 m
508.5 75 l
508.5 44.5 l
433 44.5 l
433 75 l
h
W*
0 0 509 118 rc
0.5 0 0 -0.5 433 75 cm
0 0 m
151 0 l
151 61 l
0 61 l
0 0 l
h
S
Q
/Cs1 SC
0 0 0 sc
q
0 0 509 118 rc
0.5 0 0 -0.5 443.5 27.5 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(/01)[ 24.948000 23.940000 0.000000 ] xS
Q
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
q
432.5 31 m
488 31 l
488 0.5 l
432.5 0.5 l
432.5 31 l
h
W*
0 0 509 118 rc
0.5 0 0 -0.5 432.5 31 cm
0 0 m
111 0 l
111 61 l
0 61 l
0 0 l
h
S
Q
/Cs1 SC
0 0 0 sc
q
0 0 509 118 rc
0.5 0 0 -0.5 261 70.5 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(021)[ 23.940000 22.356000 0.000000 ] xS
Q
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
q
251.5 74.5 m
307 74.5 l
307 44 l
251.5 44 l
251.5 74.5 l
h
W*
0 0 509 118 rc
0.5 0 0 -0.5 251.5 74.5 cm
0 0 m
111 0 l
111 61 l
0 61 l
0 0 l
h
S
Q
/Cs1 SC
0 0 0 sc
q
0 0 509 118 rc
0.5 0 0 -0.5 76.5 71 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(321)[ 27.360000 22.356000 0.000000 ] xS
Q
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
q
54.5 74.5 m
138 74.5 l
138 44 l
54.5 44 l
54.5 74.5 l
h
W*
0 0 509 118 rc
0.5 0 0 -0.5 54.5 74.5 cm
0 0 m
167 0 l
167 61 l
0 61 l
0 0 l
h
S
Q
/Cs1 SC
0 0 0 sc
q
0 0 509 118 rc
0.5 0 0 -0.5 229.56017 27.5 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(45\)678$'97:)[ 26.496000 21.852000 21.780000 15.228000 9.180000 32.904000 20.448000 9.612000 21.348000 9.180000 0.000000 ] xS
Q
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
q
216.5 31 m
342.5 31 l
342.5 0.5 l
216.5 0.5 l
216.5 31 l
h
W*
0 0 509 118 rc
0.5 0 0 -0.5 216.5 31 cm
0 0 m
252 0 l
252 61 l
0 61 l
0 0 l
h
S
Q
/Cs1 SC
0 0 0 sc
q
0 0 509 118 rc
0.5 0 0 -0.5 46.560162 27.5 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 34 m
(0-";7\).'97:)[ 23.940000 12.528000 22.212000 20.052000 9.180000 21.780000 22.716000 9.612000 21.348000 9.180000 0.000000 ] xS
Q
/Cs2 SC
0.59200001 0.59200001 0.59200001 sc
q
33.5 31 m
159.5 31 l
159.5 0.5 l
33.5 0.5 l
33.5 31 l
h
W*
0 0 509 118 rc
0.5 0 0 -0.5 33.5 31 cm
0 0 m
252 0 l
252 61 l
0 61 l
0 0 l
h
S
Q
1 w
q
0 0 509 118 rc
0.5 0 0 -0.5 0.49846327 87.67627 cm
12.50991 0 m
-43.865089 80.875 108.57339 62.844727 108.57339 62.844727 c
S
2 J
0.5 0 0 -0.5 47.5 58.5 cm
0.5 0.5 m
13.5 4.5 l
S
0.5 0 0 -0.5 48.5 56.5 cm
0.5 7.5 m
11.5 0.5 l
S
0 J
0.5 0 0 -0.5 138.10156 62.558846 cm
0 5.7905402 m
126.57812 -22.76903 75.621094 63.599133 42.429688 63.599136 c
S
2 J
0.5 0 0 -0.5 138.07227 59.678223 cm
0 0 m
13.004883 3.9482422 l
S
0.5 0 0 -0.5 138 64 cm
0.5 8.5 m
11.5 0.5 l
S
0 J
0.5 0 0 -0.5 137.75513 74.253418 cm
0 0 m
88.71875 0.00000155 157.88892 0.00000012 227.9397 0 c
S
2 J
0.5 0 0 -0.5 246.25 77.25 cm
0 0 m
11 6 l
S
0.5 0 0 -0.5 246 74.5 cm
0.5 6.5 m
11.5 0.5 l
S
0 J
0.5 0 0 -0.5 211.1174 63.268593 cm
11.726125 64.804764 m
-24.963327 17.861403 31.746632 -16.195238 81.32476 8.0059338 c
S
2 J
0.5 0 0 -0.5 247 64 cm
0.5 0.5 m
9.5 9.5 l
S
0.5 0 0 -0.5 245 60 cm
0.85088938 1.5 m
13.5 1.5 l
S
0 J
0.5 0 0 -0.5 306.88428 91.141479 cm
0 33.051506 m
153.80847 -41.205708 252.74023 32.865471 252.74023 32.865471 c
S
0.5 0 0 -0.5 306.77881 74.615723 cm
0 0 m
125.75 0 191.42285 12.334473 252.18848 87.803223 c
S
2 J
0.5 0 0 -0.5 430.5 82 cm
0.5 0.5 m
5.5 14.5 l
S
0.5 0 0 -0.5 426 75.5 cm
0.35786438 1.5 m
14.5 1.5 l
S
0.5 0 0 -0.5 432 39 cm
1.5 16.5 m
1.5 0.5 l
S
0.5 0 0 -0.5 424.5 33 cm
16.5 4.5 m
0.5 0.5 l
S
Q
1 1 1 sc
q
16 48 m
22.351274 48 27.5 53.148724 27.5 59.5 c
27.5 65.851273 22.351274 71 16 71 c
9.6487255 71 4.5 65.851273 4.5 59.5 c
4.5 53.148724 9.6487255 48 16 48 c
h
W*
0 0 509 118 rc
2 73.5 m
30 73.5 l
30 45.5 l
2 45.5 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 509 118 rc
0.5 0 0 -0.5 4.5 71 cm
23 46 m
35.702549 46 46 35.702549 46 23 c
46 10.297451 35.702549 0 23 0 c
10.297451 0 0 10.297451 0 23 c
0 35.702549 10.297451 46 23 46 c
h
S
Q
1 1 1 sc
q
211.1174 39.5 m
217.46867 39.5 222.6174 44.648724 222.6174 51 c
222.6174 57.351276 217.46867 62.5 211.1174 62.5 c
204.76613 62.5 199.6174 57.351276 199.6174 51 c
199.6174 44.648724 204.76613 39.5 211.1174 39.5 c
h
W*
0 0 509 118 rc
197.1174 65 m
225.1174 65 l
225.1174 37 l
197.1174 37 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 509 118 rc
0.5 0 0 -0.5 199.6174 62.5 cm
23 46 m
35.702549 46 46 35.702549 46 23 c
46 10.297451 35.702549 0 23 0 c
10.297451 0 0 10.297451 0 23 c
0 35.702549 10.297451 46 23 46 c
h
S
Q
1 1 1 sc
q
404 75 m
410.35129 75 415.5 80.148727 415.5 86.5 c
415.5 92.851273 410.35129 98 404 98 c
397.64871 98 392.5 92.851273 392.5 86.5 c
392.5 80.148727 397.64871 75 404 75 c
h
W*
0 0 509 118 rc
390 100.5 m
418 100.5 l
418 72.5 l
390 72.5 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 509 118 rc
0.5 0 0 -0.5 392.5 98 cm
23 46 m
35.702549 46 46 35.702549 46 23 c
46 10.297451 35.702549 0 23 0 c
10.297451 0 0 10.297451 0 23 c
0 35.702549 10.297451 46 23 46 c
h
S
Q
1 1 1 sc
q
413 39.5 m
419.35129 39.5 424.5 44.648724 424.5 51 c
424.5 57.351276 419.35129 62.5 413 62.5 c
406.64871 62.5 401.5 57.351276 401.5 51 c
401.5 44.648724 406.64871 39.5 413 39.5 c
h
W*
0 0 509 118 rc
399 65 m
427 65 l
427 37 l
399 37 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 509 118 rc
0.5 0 0 -0.5 401.5 62.5 cm
23 46 m
35.702549 46 46 35.702549 46 23 c
46 10.297451 35.702549 0 23 0 c
10.297451 0 0 10.297451 0 23 c
0 35.702549 10.297451 46 23 46 c
h
S
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 13.5 67 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(<)s
Q
1 1 1 sc
q
174.5 39.5 m
180.85127 39.5 186 44.648724 186 51 c
186 57.351276 180.85127 62.5 174.5 62.5 c
168.14873 62.5 163 57.351276 163 51 c
163 44.648724 168.14873 39.5 174.5 39.5 c
h
W*
0 0 509 118 rc
160.5 65 m
188.5 65 l
188.5 37 l
160.5 37 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 509 118 rc
0.5 0 0 -0.5 163 62.5 cm
23 46 m
35.702549 46 46 35.702549 46 23 c
46 10.297451 35.702549 0 23 0 c
10.297451 0 0 10.297451 0 23 c
0 35.702549 10.297451 46 23 46 c
h
S
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 172 58.5 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(=)s
Q
1 1 1 sc
q
193.5 61 m
199.85127 61 205 66.148727 205 72.5 c
205 78.851273 199.85127 84 193.5 84 c
187.14873 84 182 78.851273 182 72.5 c
182 66.148727 187.14873 61 193.5 61 c
h
W*
0 0 509 118 rc
179.5 86.5 m
207.5 86.5 l
207.5 58.5 l
179.5 58.5 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 509 118 rc
0.5 0 0 -0.5 182 84 cm
23 46 m
35.702549 46 46 35.702549 46 23 c
46 10.297451 35.702549 0 23 0 c
10.297451 0 0 10.297451 0 23 c
0 35.702549 10.297451 46 23 46 c
h
S
/Cs1 SC
0 0 0 sc
0.5 0 0 -0.5 189.5 79.5 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 23 m
(>)s
0.5 0 0 -0.5 207.5 58.5 cm
0 23 m
(?)s
0.5 0 0 -0.5 399.5 94.5 cm
0 23 m
(@)s
0.5 0 0 -0.5 409 58.5 cm
0 23 m
(A)s
ep
end
