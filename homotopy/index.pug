extends ../layout.pug

block title
    title HTS

block content
    +header('../../groupoid.svg', 'Homotopy Type System', 'The minimal core of HoTT computability')
    article.main
        .exe
            section
                h1 Abstract
            aside Максим Сохацький
                time 6 JUL 2018
                p.
                   Here are preest two languages at the same time.
                   One is <b>MLTT<sup>&infin;</sup></b> is a minimal homotopy core that is needed to compute all the MLTT [rules].
                   In its core it has only <b>comp</b> primitive (on empty homogeneous systems) and CCHM connections (for J computability).
                   And the second is <b>HTS<sup>&infin;</sup></b>, that is a homotopy type system with full HoTT computability.
                   The syntax and semantics of both are based on <b>cubicaltt</b> type checker.
            section
                .macro
                    .macro__col
                        h3#om PTS
                        ol
                            li: a(href='#pi') PI
                    .macro__col
                        h3#macro MLTT
                        ol
                            li: a(href='#pi') PI
                            li: a(href='#sigma') SIGMA
                            li: a(href='#id') ID
                            li: a(href='#induction') INDUCTION
                    .macro__col
                        h3#eff HTS
                        ol
                            li: a(href='#pi') PI
                            li: a(href='#sigma') SIGMA
                            li: a(href='#path') PATH
                            li: a(href='#induction') INDUCTION
                            li: a(href='#comp') COMP
                            li: a(href='#glue') GLUE

                p.
                    The history of Type Theory takes its root from MLTT paper <sup>1</sup>.
                    Then the Type Theory was fixed for Predicative Universes with Id types,
                    and W, Nat, List types were added <sup>2</sup>.
                    The type checker of single axiom system with Pi types only is
                    given in the CoC paper <sup>3</sup>.

                p.
                    Then Voevodsky presented HTS with strict Id and homotopical Path types, but without its computational semantics.
                    This later was fixed by Mortberg et all in <b>cubicaltt</b> and Sterling et all in <b>redtt</b>.

                p.
                    <b>Groupoid Infinity</b> is doing research in type theory, model encodings, programs extraction and formalization of mathematics.
                    We believe in high performance certified virtual machines, where certified programs extracted from provers should run on.
                    We also want to use group theory and homotopy theory for proving properties about these programs.
                p.
                    The Erlang language as target extract was chosen not only as example of simple
                    bootstrap on foreign platform, but also because this tool is most known to author
                    and he naively believes that Erlang deserves not only homotopy typechecker in its
                    platform, but type erasure and term extraction as well.

                code.
                   $ ./homotopy
                   CTT-CCHM Homotopy Type System 1.3.1

                      Usage := homotopy Args <filename>
                       Args := Command | Command Args
                    Command := parse | lex | read | fst | snd | file
                br.

            section
                h1 BNF
                p.
                    The 10 BNF definitions declare syntax that covers:
                    1) MLTT as pi, sigma and path types;
                    2) inductive types case analysis; and
                    3) simple module system.
                    This system is enough to encode
                    core <a href="https://groupoid.space/math/">cubical base library</a>.
                p.
                    Module system.
                code.
                    mod := 'module' id 'where' imp dec
                    imp := '$empty'
                    imp := skip imp
                    imp := 'import' id imp
                br.
                p.
                    The module system is present in all intermediate languages: <a href="https://phd.5ht.co/pts/pure/">PTS<sup>&infin;</sup></a>, MLTT<sup>&infin;</sup>, HTS<sup>&infin;</sup>.
                    During compilation programs in these languages are being desugared to untyped lambda interpreter called <a href="https://phd.5ht.co/lambda/intro/">CPS</a>
                    (continuation passing style certified interpreter) that incorporates intercore protocol <a href="https://phd.5ht.co/lambda/runtime/">IP</a> between
                    interpreter instances that are running at processor cores. While CPS could be seen as desugared run-time target of dependently typed lambda calculus or MLTT-based systems,
                    the IP could be seen us untyped desugared run-time target of process calculus or linear type systems (LTS).
                p.
                    The sequence of variables, parsed as application fold.
                code.
                    ids := '$empty'
                    ids := id ids
                br.
                p.
                    Telescopes.
                code.
                    tele := '$empty'
                    tele := cotele
                    cotele := '(' exp ':' exp ')' tele
                br.
                p.
                    Top-level inductive data and function definitions.
                code.
                    codec := def skip dec
                    codec := def dec
                    dec := '$empty'
                    dec := codec
                    def := 'data' id tele '=' sum
                    def := id tele ':' exp '=' exp
                    def := id tele ':' exp '=' exp 'where' def
                br.
                p.
                    Inductive and HIT introductions.
                code.
                    sum := '$empty'
                    sum := rsum
                    rsum := id tele
                    rsum := id tele '|' rsum
                    rsum := id tele '<' ids '>' sys
                    rsum := id tele '<' ids '>' sys '|' rsum
                br.
                p.
                    Inductive and HIT eliminators.
                code.
                    cobrs := '|' br brs
                    brs := '$empty'
                    brs := cobrs
                    br := ids arrow exp
                    br := ids '@' ids arrow exp
                br.
                p.
                    Lambda and Path applications.
                code.
                    app := exp exp
                    papp := exp '@' formula
                br.
                p.
                    Expressions.
                code.
                    exp := 'split' cobrs
                    exp := id
                    exp := id '{' exp '}'
                    exp := '<' ids '>' exp
                    exp := exp '.1'
                    exp := exp '.2'
                    exp := lam cotele arrow exp
                    exp := cotele arrow exp
                    exp := exp arrow exp
                    exp := cotele '*' exp
                    exp := 'comp' exp exp sys
                    exp := 'fill' exp exp sys
                    exp := 'glue' exp sys
                    exp := 'unglue' exp sys
                    exp := exp ',' exp
                    exp := papp
                    exp := '(' exp ')'
                    exp := app
                br.
                p.
                    Cubical homogeneous composition system.
                code.
                    sys := '[' sides ']'
                    sides := '$empty'
                    sides := side
                    sides := side ',' sides
                    side := '(' id '=' id ')' arrow exp
                br.
                p.
                    CCHM connections (meet and join).
                code.
                    formula := formula forall f1
                    formula := f1
                    formula := f2
                    f1 := f1 meet f2
                    f1 := f2
                    f2 := '-' f2
                    f2 := id
                br.

                h1 HOAS
                p.
                    The idea of <b>MLTT<sup>&infin;</sup></b> is a unified layered type checker.
                    We selected 5 levels of type checker awareness from pure type systems up to homotopy calculus HTS<sup>&infin;</sup>.
                code.
                    data lang
                       = PTS (_: pts)
                       | SIGMA (_: exists)
                       | ID (_: identity)
                       | INDUCTION (_: ind)
                       | HTS (_: hts)

                h2 Dependent Type Theory
                code.
                    data pts
                       = star             (n: nat)
                       | var    (x: name) (l: nat)
                       | pi     (x: name) (l: nat) (d c: lang)
                       | lambda (x: name) (l: nat) (d c: lang)
                       | app                       (f a: lang)
                br.
                code.
                    data exists
                       = sigma (n: name) (a b: lang)
                       | pair (a b: lang)
                       | fst (p: lang)
                       | snd (p: lang)
                p.
                    The categorical methods for lambda calculus and category theory in general
                    could be found in following works:

                h2 Contextual Categories
                p.
                    Categories with Families is a categorical semantics
                    of dependent type theory that nowadays is formulated
                    as cubical sets or as presheaf model of type theory.
                h2 Identity Types
                p.
                code.
                    data identity
                       = id (a b: lang)
                       | idpair (a b: lang)
                       | idelim (a b c d e: lang)

                h2 Inductive Types
                p.
                    The further development of induction inside MLTT provers led
                    to the theory of polynomial functors and well-founded trees,
                    known in programming languages as inductive types with data
                    and record core primitives of type checker. In fact, recursive inductive
                    types could be encoded in PTS using non-recursive representation of
                    Bohm-Berarducci schemes or Categorical Impredicative encoding by Steve Awodey.

                code.
                    data tele (A: U)   = emp | tel (n: name) (b: A) (t: tele A)
                    data branch (A: U) =        br (n: name) (args: list name) (term: A)
                    data label (A: U)  =       lab (n: name) (t: tele A)

                    data ind
                       = data_  (n: name) (t: tele lang) (labels:   list (label lang))
                       | case   (n: name) (t: lang)      (branches: list (branch lang))
                       | ctor   (n: name)                (args:     list lang)
                p.
                    The non-well-founded trees or infinite coinductive trees
                    are useful for modeling infinite processes and are part
                    of Milner's Pi-calculus. Coinductive streams could be found in many MLTT base libraries.

                h2 Higher Inductive Types
                p.
                    The fundamental development of equality inside MLTT
                    provers led us to the notion of ∞-groupoid as spaces.
                    In this way Path identity type appeared in the core
                    of type checker along with de Morgan algebra on
                    built-in interval type. Glue, unglue composition
                    and fill operations are also needed in the core
                    for the univalence computability and coherence.
                code.
                    data hts
                       = path (a b: lang)
                       | path_lam (n: name) (a b: lang)
                       | path_app (f: name) (a b: lang)
                       | comp_ (a b: lang)
                       | fill_ (a b c: lang)
                       | glue_ (a b c: lang)
                       | glue_elem (a b: lang)
                       | unglue_elem (a b: lang)


            section
                h2 Universes
                p.
                    The universe system is completely described by the PTS SAR notation,
                    given by Barendregt. Find more info in
                    <a href='../../pts/pure/#axioms'>Axioms and Inference Rules</a>
                    of underlying Om intermediate language.
                code.
                    PTS : U
                        = (S: (n: nat)   -> star n)
                          (A: (i: nat)   -> type i (succ i))
                          (R: (i j: nat) -> pi i j (max i j)) * unit

            section
                h1 Bibliography
                p.
                    <center><table cellspacing=5><tr><td width=5><img src="https://n2o.space/img/pdf.jpg" width=35></td><td width=400>
                    <a href="https://github.com/groupoid/groupoid.space/blob/master/tex/articles/mltt/mltt.pdf">
                    <h3>Issue I: Internalizing MLTT</h3>
                    </a></td></tr></table></center>

                h2 MLTT and PTS
                p.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/01.Lof72.txt">[1]</a>. P. Martin-Löf and G. Sambin, The Theory of Types. Studies in proof theory, 1972.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/02.Lof84.txt">[2]</a>. P. Martin-Löf and G. Sambin, Intuitionistic type theory. Studies in proof theory, Bibliopolis, 1984.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/03.Coq88.txt">[3]</a>. T. Coquand and G. Huet, “The calculus of constructions,” in Information and Computation, (Duluth, MN, USA), pp. 95–120, Academic Press, Inc., 1988.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/04.Hofmann96.txt">[4]</a>. M. Hofmann and T. Streicher, “The groupoid interpretation of type theory,” in In Venice Festschrift, pp. 83–111, Oxford University Press, 1996.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/05.Henk93.txt">[5]</a>. H. P. Barendregt, “Lambda calculi with types,” in Handbook of Logic in Computer Science (Vol. 2) (S. Abramsky, D. M. Gabbay, and S. E. Maibaum, eds.), (New York, NY, USA), pp. 117–309, Oxford University Press, Inc., 1992.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/06.Erik97.txt">[6]</a>. S. P. Jones and E. Meijer, “Henk: A typed intermediate language,” in In Proc. First Int’l Workshop on Types in Compilation, 1997.

                h2 Categorical Methods
                p.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/10.Hermida95.txt">[10]</a>. C. Hermida and B. Jacobs, “Fibrations with indeterminates: Contextual and functional completeness for polymorphic lambda calculi,” Mathematical Structures in Computer Science, vol. 5, pp. 501–531, 1995.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/11.Curien08.txt">[11]</a>. P.-L. Curien, “Category theory: a programming language-oriented introduction,” 2008.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/12.MacLane71.txt">[12]</a>. S. MacLane, Categories for the Working Mathematician. New York: Springer-Verlag, 1971. Graduate Texts in Mathematics, Vol. 5.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/13.Lawvere09.txt">[13]</a>. F. Lawvere and S. Schanuel, Conceptual Mathematics: A First Introduction to Categories. Cambridge University Press, 2009.

                h2 Categorical Models of Type Theory
                p.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/20.Dybjer08.txt">[20]</a>. A. Buisse and P. Dybjer, “The interpretation of intuitionistic type theory in locally cartesian closed categories – an intuitionistic perspective,” Electron. Notes Theor. Comput. Sci., vol. 218, pp. 21–32, Oct. 2008.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/21.Clairambault05.txt">[21]</a>. P. Clairambault, “From categories with families to locally cartesian closed categories,”
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/22.Abel08.txt">[22]</a>. A. Abel, T. Coquand, and P. Dybjer, “On the algebraic foundation of proof assistants for intuitionistic type theory,” in Functional and Logic Programming (J. Garrigue and M. V. Hermenegildo, eds.), (Berlin, Heidelberg), pp. 3–13, Springer Berlin Heidelberg, 2008.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/23.Seely84.txt">[23]</a>. R. A. Seely, “Locally cartesian closed categories and type theory,” in Mathematical proceedings of the Cambridge philosophical society, vol. 95, pp. 33–48, Cambridge University Press, 1984.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/24.Curien14.txt">[24]</a>. P.-L. Curien, R. Garner, and M. Hofmann, “Revisiting the categorical interpretation of dependent type theory,” Theoretical Computer Science, vol. 546, pp. 99–119, 2014.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/25.Castellan14.txt">[25]</a>. S. Castellan, “Dependent type theory as the initial category with families,” Internship Report, 2014.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/26.Voevodsky14.txt">[26]</a>. V. Voevodsky, “A c-system defined by a universe in a category,” 2014.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/27.Dybjer95.txt">[27]</a>. P. Dybjer, “Internal type theory,” in International Workshop on Types for Proofs and Programs, pp. 120–134, Springer, 1995.

                h2 Identity Types
                p.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/30.Bishop67.txt">[30]</a>. E. Bishop, Foundations of constructive analysis. 1967.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/31.Nordstrom90.txt">[31]</a>. B.Nordström, K.Petersson, and J.M.Smith, Programming in Martin-Löf’s type theory, vol. 200. Oxford University Press Oxford, 1990.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/32.Hermida98.txt">[32]</a>. C. Hermida and B. Jacobs, “Structural induction and coinduction in a fibrational setting,” Information and computation, vol. 145, no. 2, pp. 107–152, 1998.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/33.Barthe00.txt">[33]</a>. G. Barthe, V. Capretta, and O. Pons, “Setoids in type theory,” 2000.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/34.Voevodsky15.txt">[34]</a>. V. Voevodsky, “A c-system defined by a universe category,” Theory Appl. Categ, vol. 30, no. 37, pp. 1181–1215, 2015.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/35.Sozeau.txt">[35]</a>. M. Sozeau and N. Tabareau, “Internalizing intensional type theory,”
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/36.Selsam16.txt">[36]</a>. D. Selsam and L. de Moura, “Congruence closure in intensional type theory,” in International Joint Conference on Automated Reasoning, pp. 99–115, Springer, 2016.

                h2 Inductive Types
                p.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/40.Bohm85.txt">[40]</a>. C. Böhm and A. Berarducci, “Automatic synthesis of typed lambda- programs on term algebras,” in Theoretical Computer Science, vol. 39, pp. 135–154, 1985.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/41.Pfenning89.txt">[41]</a>. F. Pfenning and C. Paulin-Mohring, “Inductively defined types in the calculus of constructions,” in Mathematical Foundations of Programming Semantics, 5th International Conference, Tulane University, New Orleans, Louisiana, USA, March 29 - April 1, 1989, Proceedings, pp. 209–228, 1989.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/42.Wadler90.txt">[42]</a>. P. Wadler in Recursive types for free, manuscript, 1990.N. Gambino and M. Hyland, “Wellfounded trees and dependent polynomial functors,” in International Workshop on Types for Proofs and Programs, pp. 210–225, Springer, 2003.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/43.Gambino03.txt">[43]</a>.N. Gambino and M. Hyland, “Wellfounded trees and dependent polynomial functors,” in International Workshop on Types for Proofs and Programs, pp. 210–225, Springer, 2003.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/44.Dybjer94.txt">[44]</a>. P. Dybjer in Inductive families, vol. 6, pp. 440–465, Springer, 1994.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/45.Jacobs97.txt">[45]</a>. B. Jacobs and J. Rutten in A tutorial on (co) algebras and (co) induction, vol. 62, pp. 222–259, EUROPEAN ASSOCIATION FOR THEORETICAL COMPUTER, 1997.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/46.Vene00.txt">[46]</a>. V. Vene, Categorical programming with inductive and coinductive types. Tartu University Press, 2000.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/47.Basold16.txt">[47]</a>. H. Basold and H. Geuvers, “Type theory based on dependent inductive and coinductive types,” in Proceedings of the 31st Annual ACM/IEEE Symposium on Logic in Computer Science, pp. 327–336, ACM, 2016.

                h2 Higher Inductive Types
                p.
                    <a href="https://raw.githubusercontent.com/5ht/phd.5ht.co/master/hts/references/50.Hofmann94.txt">[50]</a>. M. Hofmann and T. Streicher, “The groupoid model refutes uniqueness of identity proofs,” in Logic in Computer Science, 1994. LICS’94. Proceedings., Symposium on, pp. 208–212, IEEE, 1994.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/51.Jacobs99.txt">[51]</a>. B. Jacobs, Categorical logic and type theory, vol. 141. Elsevier, 1999.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/52.Joyal14.txt">[52]</a>. A. Joyal, “Categorical homotopy type theory,” Slides from a talk at MIT dated, vol. 17, 2014.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/53.HoTT13.txt">[53]</a>. T. Coquand, P. Martin-Löf, V. Voevodsky, A. Joyal, A. Bauer, S. Awodey, M. Sozeau, M. Shulman, D. Licata, Y. Bertot, P. Dybjer, and N. Gambino, Homotopy Type Theory: Univalent Foundations of Mathematics. 2013.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/54.Mortberg17.txt">[54]</a>. C. Cohen, T. Coquand, S. Huber, and A. Mörtberg in Cubical Type Theory: a constructive interpretation of the univalence axiom, vol. abs/1611.02108, 2017.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/55.Shulman15.txt">[55]</a>. B. Ahrens, K. Kapulkin, and M. Shulman, “Univalent categories and the rezk completion,” in Extended Abstracts Fall 2013 (M. d. M. González, P. C. Yang, N. Gambino, and J. Kock, eds.), (Cham), pp. 75– 76, Springer International Publishing, 2015.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/56.Orton17.txt">[56]</a>. I. Orton and A. M. Pitts, “Axioms for modelling cubical type theory in a topos,” arXiv preprint arXiv:1712.04864, 2017.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/57.Huber16.txt">[57]</a>. S. Huber, “Cubical intepretations of type theory,” 2016.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/58.Huber17.txt">[58]</a>. S. Huber, “Canonicity for cubical type theory,” Journal of Automated Reasoning, pp. 1–38, 2017.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/59.Angiuli16.txt">[59]</a>. C. Angiuli, R. Harper, and T. Wilson, “Computational higher type theory i: Abstract cubical realizability,” arXiv preprint arXiv:1604.08873, 2016.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/60.Angiuli16.txt">[60]</a>. C. Angiuli and R. Harper, “Computational higher type theory ii: Dependent cubical realizability,” arXiv preprint arXiv:1606.09638, 2016.
                    <a href="https://raw.githubusercontent.com/5HT/phd.5ht.co/master/hts/references/61.Coquand18.txt">[61]</a>. T.Coquand, S.Huber, and A.Mörtberg , “On Higher Inductive Types in Cubical Type Theory”, arXiv preprint arXiv:1802.01170, 2018.
