extends ../layout.pug

block title
    title HOMOTOPY
    script(src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML')
    script.
     window.MathJax = { jax: ["input/TeX", "input/MathML", "input/AsciiMath", "output/CommonHTML", "output/NativeMML"],
                             TeX: { extensions: ["AMSmath.js", "AMSsymbols.js", "autoload-all.js"] },
                             extensions: ["tex2jax.js", "asciimath2jax.js", "mml2jax.js", "MathMenu.js", "MathZoom.js"],
                             "HTML-CSS": { imageFont: null },
                             AuthorInit: function() {
                                 MathJax.Hub.Register.StartupHook("TeX AMSmath Ready", function() {
                                     var TEX = MathJax.InputJax.TeX;
                                     TEX.Definitions.Add({
                                         macros: {
                                           llparenthesis: ['Macro', '\\mathopen{\u2987}'],
                                           rrparenthesis: ['Macro', '\\mathclose{\u2988}'],
                                           llbracket:     ['Macro', '\\mathopen{\u27E6}'],
                                           rrbracket:     ['Macro', '\\mathclose{\u27E7}'],
                                           incmap:        ['Macro', '\\mathclose{\u21AA}'],
                                         }
                                     });
                                 });
                             },
                             tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']],
                                        processEscapes: true }
                         };

block content
    +header('../../groupoid.svg', 'Homotopy Type System', 'Type theory with two equalities')
    article.main
        .exe
            section
                h1 SYNOPSIS

            aside <a href="https://github.com/5HT">5HT</a><br>
                <a href="https://github.com/forked-from-1kasper">Siegmentation Fault</a>
                time 28 JUN 2021
                p.
                   The HTS language proposed by Voevodsky exposes two different presheaf models of type theory:
                   the inner one is homotopy type system presheaf that models HoTT and the outer one is traditional Martin-Löf
                   type system presheaf that models set theory with UIP. The motivation behind this doubling is to
                   have an ability to express semisemplicial types. Theoretical work on merging meta-theoretical
                   and homotopical languages was continued in <a href="https://arxiv.org/pdf/1705.03307.pdf">2LTT</a> [Anenkov, Capriotti, Kraus, Sattler].

            section
                .macro
                    .macro__col
                        h3#pure <b>PTS</b>
                        ol
                            li: a(href='#univ') UNI
                            li: a(href='#pi') PI
                    .macro__col
                        h3#mltt <b>MLTT</b>
                        ol
                            li: a(href='#univ') UNI
                            li: a(href='#pi') PI
                            li: a(href='#sigma') SIGMA
                            li: a(href='#id') ID
                            li: a(href='#induction') INDUCT
                    .macro__col
                        h3#homotopy <b>CCHM</b>
                        ol
                            li: a(href='#univ') UNI
                            li: a(href='#pi') PI
                            li: a(href='#sigma') SIGMA
                            li: a(href='#path') INTERVAL
                            li: a(href='#glue') GLUE
                            li: a(href='#induction') HIT
                    .macro__col
                        h3#hts <b>HTS</b>
                        ol
                            li: a(href='#univ') UNI
                            li: a(href='#pi') PI
                            li: a(href='#sigma') SIGMA
                            li: a(href='#id') ID
                            li: a(href='#path') INTERVAL
                            li: a(href='#glue') GLUE
                            li: a(href='#induction') HIT

                p.
                    While we are on our road to HTS with Lean-like tactic language, currently we are at the stage of regular
                    cubical (HoTT) type checker with CHM-style primitives, or more general CCHM type checker.
                    You may try it at Github: <a href="https://github.com/groupoid/anders">groupoid/anders</a>.

                code.
                    $ opam install anders
                    $ anders
                    Anders theorem prover [MLTT][CCHM][HTS] version 0.7.2

                      invocation = anders | anders list
                            list = [] | command list
                       primitive = zero | one | interval | ...

                         command = check <filename>      | lex <filename>
                                 | parse <filename>      | prim primitive <name>
                                 | cubicaltt <filename>  | girard
                                 | trace                 | verbose
                                 | repl                  | help

                br.
                p.
                    Anders is idiomatic and educational. We carefully draw the favourite
                    Lean-compatible syntax to fit 130 LOC in Menhir, the MLTT core (based on Mini-TT)
                    is 500 LOC and pretypes presheaf is another 500 LOC. The MLTT hyperprover core
                    in Clojure is <a href="https://gist.github.com/5HT/2415f9945e92d7fc364f592a1abc2f93">expressible</a> in 150 LOC.
                br.

            section
                h1 SYNTAX
                p.
                    The syntax resembles original syntax of the reference CCHM type checker cubicaltt [Cohen, Coquand, Huber, Mörtberg], slightly compatible with Lean.
                    Here will be used Menhir BNF nonation as type checker is written in OCaml.
                p.
                    <b>Keywords</b>.
                    The words of a language consist of keywords or identifiers. The keywords are following:
                    <b>module</b>, <b>where</b>, <b>import</b>, <b>option</b>, <b>def</b>, <b>axiom</b>, <b>postulate</b>, <b>theorem</b>,
                    <b>(</b>, <b>)</b>, <b>[</b>, <b>]</b>, <b>&lt;</b>, <b>&gt;</b>, <b>&#47;</b>, <b>.1</b>, <b>.2</b>, <b>Π</b>,
                    <b>Σ</b>, <b>,</b>, <b>λ</b>, <b>×</b>, <b>→</b>, <b>:</b>, <b>:=</b>, <b>U</b>, <b>V</b>, <b>∧</b>, <b>∨</b>, <b>-</b>, <b>+</b>,
                    <b>@</b>, <b>PathP</b>, <b>transp</b>, <b>hcomp</b>, <b>i₀</b>, <b>i₁</b>, <b>interval</b>, <b>inductive</b>,
                    <b>record</b>, <b>Glue</b>, <b>glue</b>, <b>unglue</b>.
                p.
                    <b>Indentifiers</b>. Identifiers support UTF-8. Indentifiers couldn't start
                    with <b>:</b>, <b>-</b>, <b>→</b>. Sample identifiers:
                code.
                    ¬-of-∨, 1=1, is-?, =, $^~]!005x, ∞, x→Nat, f'
                br.
                p.
                    <b>Modules</b>. Modules represent files with declarations. More accurate,
                    BNF notation of module consists of imports, options and declarations.
                p.
                    <b>Imports</b>. The import construction supports file folder
                    structure (without file extensions) by using reserved symbol <b>&#47;</b>
                    for hierarchy walking.
                p.
                    <b>Options</b>. Each option holds bool value. Language supports following options:
                    1) <b>girard</b> (enables U : U);
                    2) <b>pre-eval</b> (normalization cache);
                    3) <b>impredicative</b> (infinite hierarchy with impredicativity rule);
                code.
                    path : IDENT | IDENT DIRSEP path
                    file : MODULE IDENT WHERE content
                    content : line content | EOF
                    line :
                       | IMPORT path
                       | OPTION IDENT IDENT
                       | declarations
                p.
                    File header sample:
                code.
                    module sample where
                    import experiments/path
                    option girard false
                br.
                p.
                    <b>Declarations</b>. Language supports following top level declarations:
                    1) <b>axiom</b> (non-computable declaration that breakes normalization);
                    2) <b>postulate</b> (alternative or inverted axiom that can preserve consistency);
                    3) <b>definition</b> (almost any explicit term or type in type theory);
                    5) <b>lemma</b> (helper in big game).
                    4) <b>theorem</b> (something valuable or complex enough).
                code.
                    vars : ident vars | ident
                    lense : LPARENS vars COLON exp1 RPARENS
                    telescope : lense telescope
                    params : telescope | []

                    declarations:
                       | DEF IDENT params DEFEQ exp1
                       | DEF IDENT params COLON exp1 DEFEQ exp1
                       | AXIOM IDENT params COLON exp1
                br.
                p.
                    Sample declarations. For example, signature <b>isProp (A : U)</b> of
                    type <b>U</b> could be defined as normalization-blocking axiom
                    without proof-term or by providing proof-term as definition.
                code.
                    axiom isProp (A : U) : U
                    def isSet (A : U) : U := Π (a b : A)
                        (x y : Path A a b), Path (Path A a b) x y
                p.
                    In this example <b>(A : U)</b>, <b>(a b : A)</b> and <b>(x y : Path A a b)</b> are
                    called telescopes. Each telescope consists of a series of lenses or empty.
                    Each lense provides a set of variable of the same type. Telescope
                    defines parameters of a declaration. Types in telescope,
                    type of declaration and proof-term are a language expressions <b>exp1</b>.
                p.
                    <b>Expressions</b>. All atomic language expressions are grouped
                    by four categories:
                    <b>exp0</b> (pair constructions),
                    <b>exp1</b> (non neutral constructions),
                    <b>exp2</b> (path and pi applcations),
                    <b>exp3</b> (neutral constructions).
                code.
                    exp0 :
                      | exp1 COMMA exp0
                      | exp1
                br.
                code.
                    exp1:
                      | LAM telescope COMMA exp1
                      | PI telescope COMMA exp1     | exp2 ARROW exp1
                      | SIGMA telescope COMMA exp1  | exp2 PROD exp1
                      | LT vars GT exp1             | exp2
                br.
                p.
                    The LR parsers demand to define <b>exp1</b> as expressions that
                    cannot be used (without a parens enclosure) as a right part of
                    left-associative application for both Path and Pi lambdas.
                code.
                    exp2 :
                      | exp2 exp3
                      | exp2 APPFORMULA exp3
                      | exp3
                br.
                p.
                    Universe indecies <b>V</b> (pretypes), <b>U</b> (inner fibrant) and <b>S</b> (outer strict)
                    are using unicode subscript letters that are already processed in lexer.
                code.
                    exp3:
                      | HOLE          | PRE
                      | KAN           | exp3 FST
                      | exp3 SND      | NEGATE exp3
                      | exp3 AND exp3 | exp3 OR exp3
                      | PATHP exp3    | TRANSP exp3 exp3
                      | IDENT         | NO
                      | LPARENS exp0 RPARENS | STRICT
                br.

                h1 SEMANTICS
                p.
                    The idea is to have a unified layered type checker, so you can disbale/enable
                    any MLTT-style inference, assign types to universes and enable/disable hierachies.
                    This will be done by providing linking API for pluggable presheaf modules.
                    We selected 5 levels of type checker awareness from universes and pure type systems
                    up to synthetic language of homotopy type theory. Each layer corresponds to its
                    presheaves with separate configuration for universe hierarchies.
                code.
                    inductive lang : U
                      | UNI: cosmos → lang
                      | PI: pure lang → lang
                      | SIGMA: total lang → lang
                      | ID: uip lang → lang
                      | PATH: homotopy lang → lang
                      | GLUE: gluening lang → lang
                      | HIT: hit lang → lang
                br.
                p.
                    We want to mention here with homage to its authors all categorical
                    models of dependent type theory:  Comprehension Categories (Grothendieck, Jacobs),
                    LCCC (Seely), D-Categories and CwA (Cartmell), CwF (Dybjer), C-Systems (Voevodsky),
                    Natural Models (Awodey). While we can build some transports between them,
                    we leave this excercise for our <a href="https://groupoid.space">mathematical components</a> library.
                br.

                h2#univ Universe Hierarchies
                p.
                    Language supports Agda-style hierarchy of universes: fibrant, interval pretypes and strict omega
                    with explicit level manipulation. All universes are bounded with preorder
                    $$
                       Fibrant_j \prec Pretypes_k \prec Strict_l,
                    $$
                p.
                    in which $j,k,l$ are bounded with equation:
                    $$
                       j < k < l.
                    $$
                p.
                    Large elimination to upper universes is prohibited. This is extendable to Agda model:
                code.
                    inductive cosmos : U
                      | prop: nat → cosmos
                      | fibrant: nat → cosmos
                      | pretypes: nat → cosmos
                      | strict: nat → cosmos
                      | omega: cosmos
                      | lock: cosmos
                br.

                h2 Dependent Types
                p.
                    <b>Definition</b> (Type).
                    A type is interpreted as a presheaf $A$, a family of sets $A_I$ with restriction maps
                    $u \mapsto u\ f, A_I \rightarrow A_J$ for $f: J\rightarrow I$. A dependent type
                    B on A is interpreted by a presheaf on category of elements of $A$: the objects
                    are pairs $(I,u)$ with $u : A_I$ and morphisms $f: (J,v) \rightarrow (I,u)$ are
                    maps $f : J \rightarrow$ such that $v = u\ f$. A dependent type B is thus given
                    by a family of sets $B(I,u)$ and restriction maps $B(I,u) \rightarrow B(J,u\ f)$.
                p.
                    We think of $A$ as a type and $B$ as a family of presheves $B(x)$ varying $x:A$.
                    The operation $\Pi(x:A)B(x)$ generalizes the semantics of
                    implication in a Kripke model.
                p#pi
                    <b>Defintion</b> (Pi). An element $w:[\Pi(x:A)B(x)](I)$ is a family
                    of functions $w_f : \Pi(u:A(J))B(J,u)$ for $f : J \rightarrow I$ such
                    that $(w_f u)g=w_{f\ g}(u\ g)$ when $u:A(J)$ and $g:K\rightarrow J$.
                code.
                    inductive pure (lang: U) : U
                      | var: name → nat → pure lang
                      | pi: name → nat → lang → lang → pure lang
                      | lambda: name → nat → lang → lang → pure lang
                      | app: lang → lang → pure lang
                br.
                p#sigma
                    <b>Defintion</b> (Sigma). The set $\Sigma(x:A)B(x)$ is the set
                    of pairs $(u,v)$ when $u:A(I),v:B(I,u)$ and restriction map $(u,v)\ f=(u\ f,v\ f)$.
                code.
                    inductive total (lang: U) : U
                      | sigma: name → lang → lang → total lang
                      | pair: lang → lang → total lang
                      | fst: lang → total lang
                      | snd: lang → total lang
                br.

                h2#path Path Types
                p.
                    The fundamental development of equality inside MLTT
                    provers led us to the notion of ∞-groupoid as spaces.
                    In this way Path identity type appeared in the core
                    of type checker along with De Morgan algebra on
                    built-in interval type.
                code.
                    inductive homotopy (lang: U) : U
                      | path: lang → lang → lang → homotopy lang
                      | plam: name → lang → lang → homotopy lang
                      | papp: lang → lang → homotopy lang
                      | interval: homotopy lang
                      | zero: homotopy lang
                      | one: homotopy lang
                      | meet: lang → lang → homotopy lang
                      | join: lang → lang → homotopy lang
                      | neg: lang → homotopy lang
                      | transp: lang → lang → lang → homotopy lang
                      | hcomp: lang → lang → homotopy lang
                br.
                p.
                    <b>Definition</b> (Cubical Presheaf $\mathbb{I}$).
                    The identity types modeled with another presheaf, the presheaf on Lawvere
                    category of distributive lattices (theory of De Morgan algebras) denoted
                    with $\Box$ &mdash; $\mathbb{I} : \Box^{op} \rightarrow \mathrm{Set}$.
                p.
                    <b>Properties of $\mathbb{I}$</b>. The presheaf $\mathbb{I}$:
                    i) has to distinct global elements $0$ and $1$ (B$_1$);
                    ii) $\mathbb{I}$(I) has a decidable equality for each $I$ (B$_2$);
                    iii) $\mathbb{I}$ is tiny so the path functor $X \mapsto X^\mathbb{I}$ has right adjoint (B$_3$).;
                    iv) $\mathbb{I}$ has meet and join (connections).
                p.
                    While having pretypes universe <b>V</b> with interval and
                    associated De Morgan algebra is enough to perform DNF normalization
                    and proving some basic statements about path, including: contractability of singletons,
                    homotopy transport, congruence, functional extensionality; it is not enough for
                    proving β rule for Path type or path composition.
                p.
                    Generalized transport <b>transp</b> adresses first problem of deriving the
                    computational β rule for Path types:
                code.
                    theorem Path-β (A : U) (a : A) (C : D A) (d: C a a (refl A a))
                       : Equ (C a a (refl A a)) d (J A a C d a (refl A a))
                      := λ (A : U), λ (a : A), λ (C : Π (x : A), Π (y : A), PathP (&lt;_&gt; A) x y → U),
                         λ (d : C a a (&lt;_&gt; a)), &lt;j&gt; transp (&lt;_&gt; C a a (&lt;_&gt; a)) -j d
                br.
                p.
                    Homogeneous composition <b>hcomp</b> is the answer to second:
                    with <b>hcomp</b> and <b>transp</b> one can express path composition,
                    groupoid, category of groupoids (groupoid interpretation and internalization in type theory).
                    One of the main roles of homogeneous composition is to be a carrier in [higher]
                    inductive type constructors for calculating of homotopy colimits and
                    direct encoding of CW-complexes (or internal models as gluening of pushout cells).
                p.
                    Equations for recursive generalized transport and homogeneous composition by Simon Huber [9]:
                code.
                    transpⁱ N φ u₀ = u₀
                    transpⁱ U φ A = A
                    transpⁱ (Π (x : A), B) φ u₀ v = transpⁱ B(x/w) φ (u₀ w(i/0)), w = transpFill⁻ⁱ A φ v, v : A(i/1)
                    transpⁱ (Σ (x : A), B) φ u₀ = (transpⁱ A φ (u₀.1),transpⁱ B(x/v) φ(u₀.2)), v = transpFillⁱ A φ u₀.1
                    transpⁱ (Pathʲ A v w) φ u₀ = 〈j〉compⁱ A [φ ↦ u₀ j, (j=0) ↦ v, (j=1) ↦ w] (u₀ j), u : A(j/0), v : A(j/1)
                    transpⁱ (Glue [φ ↦ (T,w)] A) ψ u₀ = glue [φ(i/1) ↦ t′₁] a′₁ : B(i/1)
                br.
                code.
                    hcompⁱ N [φ ↦ 0] 0 = 0
                    hcompⁱ N [φ ↦ S u] (S u₀) = S (hcompⁱ N [φ ↦ u] u₀)
                    hcompⁱ U [φ ↦ E] A = Glue [φ ↦ (E(i/1), equivⁱ E(i/1−i))] A
                    hcompⁱ (Π (x : A), B) [φ ↦ u] u₀ v = hcompⁱ B(x/v) [φ ↦ u v] (u₀ v)
                    hcompⁱ (Σ (x : A), B) [φ ↦ u] u₀ = (v(i/1), compⁱ B(x/v) [φ ↦ u.2] u₀.2), v = hfillⁱ A [φ ↦ u.1] u₀.1
                    hcompⁱ (Pathʲ A v w) [φ ↦ u] u₀ = 〈j〉 hcompⁱ A [ φ ↦ u j, (j = 0) ↦ v, (j = 1) ↦ w ] (u₀ j)
                    hcompⁱ (Glue [φ ↦ (T,w)] A) [ψ ↦ u] u₀ = glue [φ ↦ t₁] a₁ = glue [φ ↦ u(i/1)] (unglue u(i/1))
                      = u(i/1) : Glue [φ ↦ (T,w)] A, t₁ = u(i/1) : T, a₁ = unglue u(i/1) : A, glue [φ ↦ t₁] a1 = t₁ : T
                br.
                code.
                    transp⁻ⁱ A φ u = (transpⁱ A(i/1−i) φ u)(i/1−i) : A(i/0)
                    transpFillⁱ A φ u₀ = transpʲ A(i/i∧j) (φ∨(i=0)) u₀ : A
                    hfillⁱ A [φ ↦ u] u₀ = hcompʲ A [φ ↦ u(i/i∧j), (i=0) ↦ u₀] u₀ : A
                br.

                h2#induction Higher Inductive Types
                p.
                    The further development of induction inside MLTT provers led
                    to the theory of polynomial functors and well-founded trees,
                    known in programming languages as inductive types with <b>inductive</b>
                    and <b>record</b> core primitives.
                p.
                    Inductive types could be encoded in PTS/Cedile using non-recursive
                    representation of Bohm-Berarducci schemes or with categorical impredicative
                    encoding by Steve Awodey. We want to have optional infinite
                    impredicative universe in type checker for such experiments in PTS mode.
                p.
                    Anders supports Lean-compatible inductive definition so we can
                    copy-paste terms between Lean and Anders.

                code.
                    inductive tele (A: U) : U | emp: tele A | tel: name → A → tele A → tele A
                    inductive branch (A: U) : U | br: name → branch A | args: list name → A → branch A
                    inductive label (A: U) : U | lab: name → label A | t: tele A → label A

                    inductive hit (lang: U)
                      | intro: name → tele lang → list (label lang) → hit lang
                      | case: name → lang → list (branch lang) → hit lang
                      | ctor: name → list lang → hit lang
                      | htor: name → list lang → list lang → lang → hit lang
                p.
                    The non-well-founded trees or infinite coinductive trees
                    are useful for modeling infinite processes and are part
                    of Milner's Pi-calculus. Coinductive streams could be found in many MLTT base libraries.

                h2#glue Glue Types
                p.
                    Glue Types are needed to prove univalence. The basic theoretical introduction
                    of Artin Gluening could be found in SGA-4, Johnstone.
                code.
                    inductive gluening (lang: U) : U
                      | Glue: lang → lang → lang → gluening lang
                      | glue: lang → lang → gluening lang
                      | unglue: lang → lang → gluening lang
                br.

            section
                h1 Bibliography

                p.
                    1) <a href="http://www.cse.chalmers.se/~bengt/papers/GKminiTT.pdf">A simple type-theoretic language: Mini-TT</a> [Coquand, Kinoshita, Nordström, Takeyama];
                    2) <a href="https://arxiv.org/pdf/1611.02108.pdf">Cubical Type Theory: a constructive interpretation of the univalence axiom</a> [Cohen, Coquand, Huber, Mörtberg];
                    3) <a href="https://arxiv.org/pdf/1802.01170.pdf">On Higher Inductive Types in Cubical Type Theory</a> [Coquand, Huber, Mörtberg];
                    4) <a href="https://arxiv.org/pdf/1607.04156.pdf">Canonicity for Cubical Type Theory</a> [Huber];
                    5) <a href="https://arxiv.org/pdf/1902.06572.pdf">Canonicity and homotopy canonicity for cubical type theory</a> [Coquand, Huber, Sattler];
                    6) <a href="https://staff.math.su.se/anders.mortberg/papers/cubicalsynthetic.pdf">Cubical Synthetic Homotopy Theory</a> [Mörtberg, Pujet];
                    7) <a href="https://staff.math.su.se/anders.mortberg/papers/unifying.pdf">Unifying Cubical Models of Univalent Type Theory</a> [Cavallo, Mörtberg, Swan];
                    8) <a href="https://staff.math.su.se/anders.mortberg/papers/cubicalagda.pdf">Cubical Agda: A Dependently Typed PL with Univalence and HITs</a> [Vezzosi, Mörtberg, Abel];
                    9) <a href="http://www.cse.chalmers.se/~simonhu/misc/hcomp.pdf">A Cubical Type Theory for Higher Inductive Types</a> [Huber];
                    10) <a href="http://www.cse.chalmers.se/~simonhu/papers/p.pdf">Gluing for type theory</a> [Kaposi, Huber, Sattler].
