extends ../layout.pug

block title
    script(src='//cdnjs.cloudflare.com/ajax/libs/mathjax/2.6.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML')
    script.
       MathJax.Hub.Config({
          tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processEscapes: true },
          jax: ["input/TeX", "input/MathML", "input/AsciiMath", "output/CommonHTML", "output/NativeMML"],
          TeX: { extensions: ["AMSmath.js", "AMSsymbols.js", "autoload-all.js"] },
          extensions: ["tex2jax.js", "asciimath2jax.js", "mml2jax.js", "MathMenu.js", "MathZoom.js"],
          "HTML-CSS": { imageFont: null },
       });
    title HoTT COURSE

block content
    +header('../../groupoid.svg', 'Cubical Course', 'Introduction to Modern Type Theories')
    article.main
        .om
            section
                h1 Seminar
            aside <b>Lead</b>: Maxim Sokhatsky<br>
                <b>Venue</b>: Kyiv, Ukraine<br>
                <b>Date</b>: TBA

            h2 Intro
            p.
                This seminar supposed to be a contemporary introduction
                to modern type theory that is suitable for mathematicians needs,
                in the sense that this theory forms a foundation of mathematics
                and the language for theorems formulation and their proofs.

            h2 Purpose
            p.
                The seminar will focus on
                1) direct proof-term construction
                in cubical type theory with computer-based type checker;
                2) solving home assignments in cubical type checker;
                3) make people writing cubical code;
                4) writing lecture notes by students in LaTeX;
                5) making small course project as the
                final task (could be porting some library or theory
                from Agda or even formalizing a new part of mathematics);
                6) gather smart people together;
                7) have fun.

            h2 The HoTT Book
            p.
                While this seminar will try to follow HoTT book as a main source,
                I will try to give some parts, not present in HoTT, such as
                algebraic topology or higher category theory. On the other
                hand I will miss some parts from HoTT. Please treat this
                course as author's one, but heavily inspired by HoTT book
                and cubical type checkers.

            h2 Cubical Languages
            p.
                What is cubical type theory and why it is important?
                The cubical type theory is a theory in which univalence
                axiom by Voevodsky has computational interpretation.
                There are several type checkers which use different
                flavors of cubical type theory while sharing the same concept.
                Most notable stable implementations are: 1) <b>agda --cubical</b>;
                2) <b>cubicaltt</b>; 3) <b>cubicaltt/hcomptrans</b>; 4) <b>yacctt</b>; 5) <b>RedPRL</b>.
                We will show differences between them and students are free
                to choose type checker of their favor (for home assignments),
                but at learning classes (joint hackathon) I will use cubicaltt
                flavor I most experienced with.

        .om
            section
                h1 Foundations
                h2 1. MLTT
        section
            p.
                The first section is an introduction to type theory,
                its subject matter, and the method of computer science. We will
                show basic principles of lambda calculus, its most powerful
                version &mdash; System $P_\omega$, Calculus of Constructions,
                and Pure Type Systems. Then we will encode the theorems of MLTT
                type system in cubical type checkers. This section will cover
                <b>Pi</b>, <b>Sigma</b>, <b>Equ</b>, <b>W</b> types.
            p.
                HoTT 1.3, 1.4, 1.5, 1.6, 1.12, 2.7, 2.9, 2.11, 6.2

            <center><table cellspacing=5><tr><td width=5><img src="https://n2o.space/img/pdf.jpg" width=35></td><td width=400>
            <a href="https://github.com/groupoid/groupoid.space/blob/master/tex/articles/mltt/mltt.pdf">
            <h3>Types I: Internalizing Martin-LÃ¶f Type Theory</h3>
            </a></td></tr></table></center>
        .om
            section
                h2 2. Inductive Types
        section
            p.
                The second section is an introduction to basic inductive
                types and induction principle. Inductive types form a basis
                of so-called Calculus of Inductive Constructions, the theory behind Coq.
                We will show how proving theorems with induction principle will
                differ from cubical constructions.  Also, we introduce an
                general Impredicative Encoding of Inductive Types (Awodey).
                This section will cover: <b>Empty</b>, <b>Unit</b>,
                <b>Either</b>, <b>Prod</b>, <b>Bool</b>, <b>Maybe</b>,
                <b>Nat</b>, <b>List</b>, <b>Fix</b>, <b>Mu</b>, <b>Nu</b>,
                <b>Free</b>, <b>Cofree</b> types.
            p.
                HoTT 1.7, 1.8, 1.9, 5.1, 5.6
        .om
            section
                h2 3. Fibrations and n-Groupoids
            p.
                This topic gives a fundamental view of Pi types as Fibrations
                used in constructive Equivalence. Also here we give an infinite
                hierarchy of types, containing higher globular equalities used
                as a base for IPL, Set Theory, and Simplicial Geometry.
                This section will cover <b>Fiber</b>, <b>n-Groupoid</b>, <b>$\infty$-Groupoid</b> types.
            p.
                HoTT 2.1, 2.3, 2.4, 2.6, 2.7
        .om
            section
                h2 4. Prop and Set
        section
            p.
                This section is an introduction to Intuitionistic Propositional Logic (IPL)
                its difference from Classical Logic, Axiom of Choice, Law of Excluding Middle,
                Propositional Truncation, Hedberg Theorem, Decidable Types, Constructive Set Theory.
                This section will cover: <b>Prop</b>, <b>Set</b>, <b>Decidable</b>,
                <b>Stable</b>, <b>Discrete</b> types.
            p.
                HoTT 3.1, 3.3, 3.11
        .om
            section
                h2 5. Equiv, Iso and Univ
        section
            p.
                In Type Theory exists on three equalities: 1) built-in into type checker,
                representing Id, Equ or Path type with J eliminator; 2) Fibration based Equivalence;
                3) Isomorphism containing retract and section.
                This fact leads to Univalence Axiom that states that all equalities are equal and this
                could be proved in cubical type checkers.
                This section will cover: <b>Equiv</b>, <b>Iso</b>, <b>Homotopy</b>,
                <b>Univalence</b>, <b>Injective</b>, <b>Surjective</b> types.
            p.
                HoTT 2.10, 4.6, 4.7

            <center><table cellspacing=5><tr><td width=5><img src="https://n2o.space/img/pdf.jpg" width=35></td><td width=400>
            <a href="https://github.com/groupoid/groupoid.space/blob/master/tex/articles/equ/equ.pdf">
            <h3>Types 5: Many faces of Equality</h3>
            </a></td></tr></table></center>

        .om
            section
                h2 6. Higher Inductive Types
        section
            p.
                One of the primary motivation of HoTT is constructive geometry and
                cell complexes, the spaces constructed by gluing n-discs along
                their boundaries. In this section, we show how to build topological
                primitives and reason about them.
                This section will cover: <b>Line</b>, <b>Suspension</b>,
                <b>n-Sphere</b>, <b>Pushout</b>, <b>Pullback</b>,
                <b>Truncation</b>, <b>Quotient</b> types.
            p.
                HoTT 6.3, 6.4, 6.5, 6.6, 6.9, 6.10
        .om
            section
                h2 7. Modalities
        section
            p.
                This section will cover: <b>Infinitesimal</b> type.
            p.
                HoTT 7.7
        .om
            section
                h1 Mathematics
                h2 8. Category Theory
        section
            p.
                More than 10 Field's awards are taken with Category Theory (CT) as an instrument.
                For doing Math, CT is crucial. As a companion to HoTT chapter on CT,
                we suggest the course of Steve Awodey (the disciple of Saunders Mac Lane),
                who also made HoTT possible.
            p.
                This section will give the fundamental notion of following types:
                <b>Precategory</b>, <b>Rezk Completion</b>,
                <b>Functor</b>, <b>Natural Transformation</b>, <b>Adjoint</b>, <b>Cone</b>,
                <b>Structure Identity Principle</b>, <b>Limit</b>, <b>Pullback</b>, <b>Kan Extension</b>,
                <b>Monomorphism</b>, <b>Epimorphism</b>, <b>Universal Mapping Property</b>.
            p.
                The primary application of CT in Computer Science is a building of the
                categorical model of Dependently Typed Lambda Calculus as an internal
                language of Locally Cartesian Closed Category. The two models mentioned
                in this course are Categories with Families (Dybjer) and C-Systems (Voevodsky).
            p.
                Also as examples of Category instances following types are used: Category of Sets,
                Category of Functions, Category of Categories, Category of Functors, Slice Category, Product Category.
                Using those we can construct basic examples of 2-categories, and give a very basic intro to
                $\infty$-Categories.

            <center><table cellspacing=5><tr><td width=5><img src="https://n2o.space/img/pdf.jpg" width=35></td><td width=400>
            <a href="https://github.com/groupoid/groupoid.space/blob/master/tex/articles/cwf/cwf.pdf">
            <h3>Appendix 8.1: Context Categories for Martin-LÃ¶f Type Theory</h3>
            </a></td></tr></table></center>

        .om
            section
                h2 9. Topos Theory
        section
            p.
                Topos Theory will give a more in-depth look into categorical models
                and make a more strong foundation to build a bridge between CT and Logic of Space.
            p.
                In this section, I will mention <b>Subobject Classifier</b> and <b>Topos</b> types.

            <center><table cellspacing=5><tr><td width=5><img src="https://n2o.space/img/pdf.jpg" width=35></td><td width=400>
            <a href="https://github.com/groupoid/groupoid.space/blob/master/tex/articles/topos/topos.pdf">
            <h3>Types 9: Formal Topos on Category of Sets</h3>
            </a></td></tr></table></center>

        .om
            section
                h2 10. Basic Algebra
        section
            p.
                Types in this section: <b>Monoid</b>, <b>Commutative Monoid</b>, <b>Group</b>,
                <b>Ring</b>, <b>Abelian Group</b>, <b>Abelian Ring</b>.
        .om
            section
                h2 11. Ordinals
        section
            p.
                Types in this section: <b>Ordinal</b>, <b>Mahlo</b>.
        .om
            section
                h2 12. Differential Topology
        section
            p.
                Types in this section: <b>Abstract Homogeneous Structure</b>, <b>Shape</b>,
                <b>Ãtale Map</b>, <b>Automorphism</b>, <b>Fiber Bundle</b>, <b>Manifold</b>,
                <b>Covering Space</b> (G-Set).
        .om
            section
                h2 13. Hopf Fibrations
        section
            p.
                Types in this section: <b>Hopf</b>.
        .om
            section
                h2 14. Introduction to K-Theory
        section
            p.
                Types in this section: <b>Category of Commutative Monoids</b>,
                <b>Category of Abelian Groups</b>, <b>Grothendieck Group</b>.
        .om
            section
                h1 History

        .types
            h2 Historical Notes
            p.
                As for the tower of type theories that are necessary for CCHM (Cohen-Coquand-Huber-Mortberg)
                introduction we will use the following setting.

            h2 Type Systems
            -
                    var core = {
                    'PTS':  [ 'pi' ],
                    'MLTT': [ 'pi', 'sigma', 'id', 'W' ],
                    'CiC':  [ 'pi', 'sigma', 'id', 'fix', 'induction' ],
                    'CCHM': [ 'pi', 'sigma', 'path', 'comp', 'glue', 'HIT' ],
                }

            .type
                for v, k in core
                    ol.type__col
                        h3= k.toUpperCase()
                        for i in v
                            li: a(href='#'+i)= i.toUpperCase()
            p.
                These historical
                prerequisites (PTS, MLTT, CiC) and will be given along the way of the course.
                The history part could be extended by request from the students.

        .om
            section
                h1 Towards EGA/SGA
        section
            p.
                Cohesive Type Theory is satisfying the needs of modeling modalities, such as
                connectedness, compactness, infinitesimal shapes, etc.
                Differential Cohesive Type Theory is the internal language of differential
                cohesive $(\infty,1)$-topoi, with additional structure, just as $(\infty,1)$-categories
                add a globular path equality structure to locally cartesian closed categories
                and its internal language â MLTT. Please refer to
                <a href="https://hott-uf.github.io/2017/abstracts/cohesivett.pdf">cohesivett</a>
                for more information.

            p.
                Cohesive types modeled in the base library as undefined axioms.
                Process Calculus is another example of modality types with special
                spawn arrows hiding the underlying run-time implementation.
